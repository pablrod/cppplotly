/**
 * @file Bar.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#bar>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Bar/Error_x.h"
#include "CppPlotly/Trace/Bar/Error_y.h"
#include "CppPlotly/Trace/Bar/Hoverlabel.h"
#include "CppPlotly/Trace/Bar/Insidetextfont.h"
#include "CppPlotly/Trace/Bar/Marker.h"
#include "CppPlotly/Trace/Bar/Outsidetextfont.h"
#include "CppPlotly/Trace/Bar/Selected.h"
#include "CppPlotly/Trace/Bar/Stream.h"
#include "CppPlotly/Trace/Bar/Textfont.h"
#include "CppPlotly/Trace/Bar/Transform.h"
#include "CppPlotly/Trace/Bar/Unselected.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * The data visualized by the span of the bars is set in `y` if `orientation` is set th *v* (the default) and the labels are set in `x`. By setting `orientation` to *h*, the roles are interchanged.
         *
         *
         */ 
        class Bar : public virtual CppPlotly::BaseTrace {
        public:
            Bar() :
                            _bar({
                                {"type", "bar"},
                                    })
                        {}

           /**
Sets where the bar base is drawn (in position axis units). In *stack* or *relative* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.
*/Bar & Base(const json11::Json::object &base ) {
    _bar.insert({"base", base});
    return *this;
}


/**
Sets the source reference on plot.ly for  base .
*/Bar & Basesrc(const std::string &basesrc ) {
    _bar.insert({"basesrc", basesrc});
    return *this;
}


/**
Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
*/Bar & Cliponaxis(const bool &cliponaxis ) {
    _bar.insert({"cliponaxis", cliponaxis});
    return *this;
}


/**
Constrain the size of text inside or outside a bar to be no larger than the bar itself.
*/Bar & Constraintext(const json11::Json::object &constraintext ) {
    _bar.insert({"constraintext", constraintext});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Bar & Customdata(const std::vector<double> &customdata ) {
    _bar.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Bar & Customdata(const std::vector<std::string> &customdata ) {
    _bar.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Bar & Customdata(const json11::Json::object &customdata ) {
    _bar.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Bar & Customdatasrc(const std::string &customdatasrc ) {
    _bar.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the x coordinate step. See `x0` for more info.
*/Bar & Dx(const double &dx ) {
    _bar.insert({"dx", dx});
    return *this;
}


/**
Sets the y coordinate step. See `y0` for more info.
*/Bar & Dy(const double &dy ) {
    _bar.insert({"dy", dy});
    return *this;
}


Bar & Error_x(const CppPlotly::Trace::bar::Error_x &error_x ) {
    _bar.insert({"error_x", error_x});
    return *this;
}


Bar & Error_y(const CppPlotly::Trace::bar::Error_y &error_y ) {
    _bar.insert({"error_y", error_y});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Bar & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _bar.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Bar & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _bar.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Bar & Hoverlabel(const CppPlotly::Trace::bar::Hoverlabel &hoverlabel ) {
    _bar.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
*/Bar & Hovertext(const json11::Json::object &hovertext ) {
    _bar.insert({"hovertext", hovertext});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertext .
*/Bar & Hovertextsrc(const std::string &hovertextsrc ) {
    _bar.insert({"hovertextsrc", hovertextsrc});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Bar & Ids(const std::vector<double> &ids ) {
    _bar.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Bar & Ids(const std::vector<std::string> &ids ) {
    _bar.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Bar & Ids(const json11::Json::object &ids ) {
    _bar.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Bar & Idssrc(const std::string &idssrc ) {
    _bar.insert({"idssrc", idssrc});
    return *this;
}


Bar & Insidetextfont(const CppPlotly::Trace::bar::Insidetextfont &insidetextfont ) {
    _bar.insert({"insidetextfont", insidetextfont});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Bar & Legendgroup(const std::string &legendgroup ) {
    _bar.insert({"legendgroup", legendgroup});
    return *this;
}


Bar & Marker(const CppPlotly::Trace::bar::Marker &marker ) {
    _bar.insert({"marker", marker});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Bar & Name(const std::string &name ) {
    _bar.insert({"name", name});
    return *this;
}


/**
Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.
*/Bar & Offset(const json11::Json::object &offset ) {
    _bar.insert({"offset", offset});
    return *this;
}


/**
Sets the source reference on plot.ly for  offset .
*/Bar & Offsetsrc(const std::string &offsetsrc ) {
    _bar.insert({"offsetsrc", offsetsrc});
    return *this;
}


/**
Sets the opacity of the trace.
*/Bar & Opacity(const double &opacity ) {
    _bar.insert({"opacity", opacity});
    return *this;
}


/**
Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).
*/Bar & Orientation(const json11::Json::object &orientation ) {
    _bar.insert({"orientation", orientation});
    return *this;
}


Bar & Outsidetextfont(const CppPlotly::Trace::bar::Outsidetextfont &outsidetextfont ) {
    _bar.insert({"outsidetextfont", outsidetextfont});
    return *this;
}


/**
For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the radial coordinates.
*/Bar & R(const std::vector<double> &r ) {
    _bar.insert({"r", r});
    return *this;
}


/**
For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the radial coordinates.
*/Bar & R(const std::vector<std::string> &r ) {
    _bar.insert({"r", r});
    return *this;
}


/**
For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the radial coordinates.
*/Bar & R(const json11::Json::object &r ) {
    _bar.insert({"r", r});
    return *this;
}


/**
Sets the source reference on plot.ly for  r .
*/Bar & Rsrc(const std::string &rsrc ) {
    _bar.insert({"rsrc", rsrc});
    return *this;
}


Bar & Selected(const CppPlotly::Trace::bar::Selected &selected ) {
    _bar.insert({"selected", selected});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Bar & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _bar.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Bar & Showlegend(const bool &showlegend ) {
    _bar.insert({"showlegend", showlegend});
    return *this;
}


Bar & Stream(const CppPlotly::Trace::bar::Stream &stream ) {
    _bar.insert({"stream", stream});
    return *this;
}


/**
For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the angular coordinates.
*/Bar & T(const std::vector<double> &t ) {
    _bar.insert({"t", t});
    return *this;
}


/**
For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the angular coordinates.
*/Bar & T(const std::vector<std::string> &t ) {
    _bar.insert({"t", t});
    return *this;
}


/**
For legacy polar chart only.Please switch to *scatterpolar* trace type.Sets the angular coordinates.
*/Bar & T(const json11::Json::object &t ) {
    _bar.insert({"t", t});
    return *this;
}


/**
Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
*/Bar & Text(const json11::Json::object &text ) {
    _bar.insert({"text", text});
    return *this;
}


Bar & Textfont(const CppPlotly::Trace::bar::Textfont &textfont ) {
    _bar.insert({"textfont", textfont});
    return *this;
}


/**
Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed). *auto* positions `text` inside or outside so that `text` size is maximized.
*/Bar & Textposition(const json11::Json::object &textposition ) {
    _bar.insert({"textposition", textposition});
    return *this;
}


/**
Sets the source reference on plot.ly for  textposition .
*/Bar & Textpositionsrc(const std::string &textpositionsrc ) {
    _bar.insert({"textpositionsrc", textpositionsrc});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Bar & Textsrc(const std::string &textsrc ) {
    _bar.insert({"textsrc", textsrc});
    return *this;
}


Bar & Transforms(const std::vector<CppPlotly::Trace::bar::Transform> &transforms ) {
    _bar.insert({"transforms", transforms});
    return *this;
}


/**
Sets the source reference on plot.ly for  t .
*/Bar & Tsrc(const std::string &tsrc ) {
    _bar.insert({"tsrc", tsrc});
    return *this;
}


Bar & Uid(const std::string &uid ) {
    _bar.insert({"uid", uid});
    return *this;
}


Bar & Unselected(const CppPlotly::Trace::bar::Unselected &unselected ) {
    _bar.insert({"unselected", unselected});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Bar & Visible(const json11::Json::object &visible ) {
    _bar.insert({"visible", visible});
    return *this;
}


/**
Sets the bar width (in position axis units).
*/Bar & Width(const json11::Json::object &width ) {
    _bar.insert({"width", width});
    return *this;
}


/**
Sets the source reference on plot.ly for  width .
*/Bar & Widthsrc(const std::string &widthsrc ) {
    _bar.insert({"widthsrc", widthsrc});
    return *this;
}


/**
Sets the x coordinates.
*/Bar & X(const std::vector<double> &x ) {
    _bar.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates.
*/Bar & X(const std::vector<std::string> &x ) {
    _bar.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates.
*/Bar & X(const json11::Json::object &x ) {
    _bar.insert({"x", x});
    return *this;
}


/**
Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
*/Bar & X0(const json11::Json::object &x0 ) {
    _bar.insert({"x0", x0});
    return *this;
}


/**
Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
*/Bar & Xaxis(const json11::Json::object &xaxis ) {
    _bar.insert({"xaxis", xaxis});
    return *this;
}


/**
Sets the calendar system to use with `x` date data.
*/Bar & Xcalendar(const json11::Json::object &xcalendar ) {
    _bar.insert({"xcalendar", xcalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Bar & Xsrc(const std::string &xsrc ) {
    _bar.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets the y coordinates.
*/Bar & Y(const std::vector<double> &y ) {
    _bar.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates.
*/Bar & Y(const std::vector<std::string> &y ) {
    _bar.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates.
*/Bar & Y(const json11::Json::object &y ) {
    _bar.insert({"y", y});
    return *this;
}


/**
Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
*/Bar & Y0(const json11::Json::object &y0 ) {
    _bar.insert({"y0", y0});
    return *this;
}


/**
Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
*/Bar & Yaxis(const json11::Json::object &yaxis ) {
    _bar.insert({"yaxis", yaxis});
    return *this;
}


/**
Sets the calendar system to use with `y` date data.
*/Bar & Ycalendar(const json11::Json::object &ycalendar ) {
    _bar.insert({"ycalendar", ycalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Bar & Ysrc(const std::string &ysrc ) {
    _bar.insert({"ysrc", ysrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _bar;
            }

        private:
            
            json11::Json::object _bar;

        };
    }
}


