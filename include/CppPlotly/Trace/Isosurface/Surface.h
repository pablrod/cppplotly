/**
 * @file Surface.h
This attribute is part of the possible options for the trace isosurface.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#isosurface>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>




namespace CppPlotly {
    namespace Trace {
    namespace isosurface {

    /**
     * 
     *
     *
     */
    class Surface {
    public:

    /**
Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.
*/Surface & Count(const int &count ) {
    _surface.insert({"count", count});
    return *this;
}


/**
Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.
*/Surface & Fill(const double &fill ) {
    _surface.insert({"fill", fill});
    return *this;
}


/**
Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.
*/Surface & Pattern(const json11::Json &pattern ) {
    _surface.insert({"pattern", pattern});
    return *this;
}


/**
Hides/displays surfaces between minimum and maximum iso-values.
*/Surface & Show(const bool &show ) {
    _surface.insert({"show", show});
    return *this;
}




    json11::Json to_json() const {
        return _surface;
    }

    private:

    json11::Json::object _surface;

    };

    }

    }
}
