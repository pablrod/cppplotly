/**
 * @file Surface.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#surface>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Surface/Colorbar.h"
#include "CppPlotly/Trace/Surface/Contours.h"
#include "CppPlotly/Trace/Surface/Hoverlabel.h"
#include "CppPlotly/Trace/Surface/Lighting.h"
#include "CppPlotly/Trace/Surface/Lightposition.h"
#include "CppPlotly/Trace/Surface/Stream.h"
#include "CppPlotly/Trace/Surface/Transform.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * The data the describes the coordinates of the surface is set in `z`. Data in `z` should be a {2D array}. Coordinates in `x` and `y` can either be 1D {arrays} or {2D arrays} (e.g. to graph parametric surfaces). If not provided in `x` and `y`, the x and y coordinates are assumed to be linear starting at 0 with a unit step. The color scale corresponds to the `z` values by default. For custom color scales, use `surfacecolor` which should be a {2D array}, where its bounds can be controlled using `cmin` and `cmax`.
         *
         *
         */ 
        class Surface : public virtual CppPlotly::BaseTrace {
        public:
            Surface() :
                            _surface({
                                {"type", "surface"},
                                    })
                        {}

           /**
Determines whether or not the colorscale is picked using the sign of the input z values.
*/Surface & Autocolorscale(const bool &autocolorscale ) {
    _surface.insert({"autocolorscale", autocolorscale});
    return *this;
}


/**
Determines the whether or not the color domain is computed with respect to the input data.
*/Surface & Cauto(const bool &cauto ) {
    _surface.insert({"cauto", cauto});
    return *this;
}


/**
Sets the upper bound of color domain.
*/Surface & Cmax(const double &cmax ) {
    _surface.insert({"cmax", cmax});
    return *this;
}


/**
Sets the lower bound of color domain.
*/Surface & Cmin(const double &cmin ) {
    _surface.insert({"cmin", cmin});
    return *this;
}


Surface & Colorbar(const CppPlotly::Trace::surface::Colorbar &colorbar ) {
    _surface.insert({"colorbar", colorbar});
    return *this;
}


/**
Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax
*/Surface & Colorscale(const json11::Json::object &colorscale ) {
    _surface.insert({"colorscale", colorscale});
    return *this;
}


Surface & Contours(const CppPlotly::Trace::surface::Contours &contours ) {
    _surface.insert({"contours", contours});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Surface & Customdata(const std::vector<double> &customdata ) {
    _surface.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Surface & Customdata(const std::vector<std::string> &customdata ) {
    _surface.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Surface & Customdata(const json11::Json::object &customdata ) {
    _surface.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Surface & Customdatasrc(const std::string &customdatasrc ) {
    _surface.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Determines whether or not a surface is drawn. For example, set `hidesurface` to *false* `contours.x.show` to *true* and `contours.y.show` to *true* to draw a wire frame plot.
*/Surface & Hidesurface(const bool &hidesurface ) {
    _surface.insert({"hidesurface", hidesurface});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Surface & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _surface.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Surface & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _surface.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Surface & Hoverlabel(const CppPlotly::Trace::surface::Hoverlabel &hoverlabel ) {
    _surface.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Surface & Ids(const std::vector<double> &ids ) {
    _surface.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Surface & Ids(const std::vector<std::string> &ids ) {
    _surface.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Surface & Ids(const json11::Json::object &ids ) {
    _surface.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Surface & Idssrc(const std::string &idssrc ) {
    _surface.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Surface & Legendgroup(const std::string &legendgroup ) {
    _surface.insert({"legendgroup", legendgroup});
    return *this;
}


Surface & Lighting(const CppPlotly::Trace::surface::Lighting &lighting ) {
    _surface.insert({"lighting", lighting});
    return *this;
}


Surface & Lightposition(const CppPlotly::Trace::surface::Lightposition &lightposition ) {
    _surface.insert({"lightposition", lightposition});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Surface & Name(const std::string &name ) {
    _surface.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the surface.
*/Surface & Opacity(const double &opacity ) {
    _surface.insert({"opacity", opacity});
    return *this;
}


/**
Reverses the colorscale.
*/Surface & Reversescale(const bool &reversescale ) {
    _surface.insert({"reversescale", reversescale});
    return *this;
}


/**
Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
*/Surface & Scene(const json11::Json::object &scene ) {
    _surface.insert({"scene", scene});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Surface & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _surface.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Surface & Showlegend(const bool &showlegend ) {
    _surface.insert({"showlegend", showlegend});
    return *this;
}


/**
Determines whether or not a colorbar is displayed for this trace.
*/Surface & Showscale(const bool &showscale ) {
    _surface.insert({"showscale", showscale});
    return *this;
}


Surface & Stream(const CppPlotly::Trace::surface::Stream &stream ) {
    _surface.insert({"stream", stream});
    return *this;
}


/**
Sets the surface color values, used for setting a color scale independent of `z`.
*/Surface & Surfacecolor(const std::vector<double> &surfacecolor ) {
    _surface.insert({"surfacecolor", surfacecolor});
    return *this;
}


/**
Sets the surface color values, used for setting a color scale independent of `z`.
*/Surface & Surfacecolor(const std::vector<std::string> &surfacecolor ) {
    _surface.insert({"surfacecolor", surfacecolor});
    return *this;
}


/**
Sets the surface color values, used for setting a color scale independent of `z`.
*/Surface & Surfacecolor(const json11::Json::object &surfacecolor ) {
    _surface.insert({"surfacecolor", surfacecolor});
    return *this;
}


/**
Sets the source reference on plot.ly for  surfacecolor .
*/Surface & Surfacecolorsrc(const std::string &surfacecolorsrc ) {
    _surface.insert({"surfacecolorsrc", surfacecolorsrc});
    return *this;
}


/**
Sets the text elements associated with each z value. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
*/Surface & Text(const json11::Json::object &text ) {
    _surface.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Surface & Textsrc(const std::string &textsrc ) {
    _surface.insert({"textsrc", textsrc});
    return *this;
}


Surface & Transforms(const std::vector<CppPlotly::Trace::surface::Transform> &transforms ) {
    _surface.insert({"transforms", transforms});
    return *this;
}


Surface & Uid(const std::string &uid ) {
    _surface.insert({"uid", uid});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Surface & Visible(const json11::Json::object &visible ) {
    _surface.insert({"visible", visible});
    return *this;
}


/**
Sets the x coordinates.
*/Surface & X(const std::vector<double> &x ) {
    _surface.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates.
*/Surface & X(const std::vector<std::string> &x ) {
    _surface.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates.
*/Surface & X(const json11::Json::object &x ) {
    _surface.insert({"x", x});
    return *this;
}


/**
Sets the calendar system to use with `x` date data.
*/Surface & Xcalendar(const json11::Json::object &xcalendar ) {
    _surface.insert({"xcalendar", xcalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Surface & Xsrc(const std::string &xsrc ) {
    _surface.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets the y coordinates.
*/Surface & Y(const std::vector<double> &y ) {
    _surface.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates.
*/Surface & Y(const std::vector<std::string> &y ) {
    _surface.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates.
*/Surface & Y(const json11::Json::object &y ) {
    _surface.insert({"y", y});
    return *this;
}


/**
Sets the calendar system to use with `y` date data.
*/Surface & Ycalendar(const json11::Json::object &ycalendar ) {
    _surface.insert({"ycalendar", ycalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Surface & Ysrc(const std::string &ysrc ) {
    _surface.insert({"ysrc", ysrc});
    return *this;
}


/**
Sets the z coordinates.
*/Surface & Z(const std::vector<double> &z ) {
    _surface.insert({"z", z});
    return *this;
}


/**
Sets the z coordinates.
*/Surface & Z(const std::vector<std::string> &z ) {
    _surface.insert({"z", z});
    return *this;
}


/**
Sets the z coordinates.
*/Surface & Z(const json11::Json::object &z ) {
    _surface.insert({"z", z});
    return *this;
}


/**
Sets the calendar system to use with `z` date data.
*/Surface & Zcalendar(const json11::Json::object &zcalendar ) {
    _surface.insert({"zcalendar", zcalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  z .
*/Surface & Zsrc(const std::string &zsrc ) {
    _surface.insert({"zsrc", zsrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _surface;
            }

        private:
            
            json11::Json::object _surface;

        };
    }
}


