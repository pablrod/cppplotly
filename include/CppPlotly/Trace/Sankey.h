/**
 * @file Sankey.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#sankey>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Sankey/Domain.h"
#include "CppPlotly/Trace/Sankey/Hoverlabel.h"
#include "CppPlotly/Trace/Sankey/Link.h"
#include "CppPlotly/Trace/Sankey/Node.h"
#include "CppPlotly/Trace/Sankey/Stream.h"
#include "CppPlotly/Trace/Sankey/Textfont.h"
#include "CppPlotly/Trace/Sankey/Transform.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * Sankey plots for network flow data analysis. The nodes are specified in `nodes` and the links between sources and targets in `links`. The colors are set in `nodes[i].color` and `links[i].color`; otherwise defaults are used.
         *
         *
         */ 
        class Sankey : public virtual CppPlotly::BaseTrace {
        public:
            Sankey() :
                            _sankey({
                                {"type", "sankey"},
                                    })
                        {}

           /**
If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.
*/Sankey & Arrangement(const json11::Json::object &arrangement ) {
    _sankey.insert({"arrangement", arrangement});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Sankey & Customdata(const std::vector<double> &customdata ) {
    _sankey.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Sankey & Customdatasrc(const std::string &customdatasrc ) {
    _sankey.insert({"customdatasrc", customdatasrc});
    return *this;
}


Sankey & Domain(const CppPlotly::Trace::sankey::Domain &domain ) {
    _sankey.insert({"domain", domain});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Sankey & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _sankey.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Sankey & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _sankey.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Sankey & Hoverlabel(const CppPlotly::Trace::sankey::Hoverlabel &hoverlabel ) {
    _sankey.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Sankey & Ids(const std::vector<double> &ids ) {
    _sankey.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Sankey & Idssrc(const std::string &idssrc ) {
    _sankey.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Sankey & Legendgroup(const std::string &legendgroup ) {
    _sankey.insert({"legendgroup", legendgroup});
    return *this;
}


Sankey & Link(const CppPlotly::Trace::sankey::Link &link ) {
    _sankey.insert({"link", link});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Sankey & Name(const std::string &name ) {
    _sankey.insert({"name", name});
    return *this;
}


Sankey & Node(const CppPlotly::Trace::sankey::Node &node ) {
    _sankey.insert({"node", node});
    return *this;
}


/**
Sets the opacity of the trace.
*/Sankey & Opacity(const double &opacity ) {
    _sankey.insert({"opacity", opacity});
    return *this;
}


/**
Sets the orientation of the Sankey diagram.
*/Sankey & Orientation(const json11::Json::object &orientation ) {
    _sankey.insert({"orientation", orientation});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Sankey & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _sankey.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Sankey & Showlegend(const bool &showlegend ) {
    _sankey.insert({"showlegend", showlegend});
    return *this;
}


Sankey & Stream(const CppPlotly::Trace::sankey::Stream &stream ) {
    _sankey.insert({"stream", stream});
    return *this;
}


Sankey & Textfont(const CppPlotly::Trace::sankey::Textfont &textfont ) {
    _sankey.insert({"textfont", textfont});
    return *this;
}


Sankey & Transforms(const std::vector<CppPlotly::Trace::sankey::Transform> &transforms ) {
    _sankey.insert({"transforms", transforms});
    return *this;
}


Sankey & Uid(const std::string &uid ) {
    _sankey.insert({"uid", uid});
    return *this;
}


/**
Sets the value formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-format/blob/master/README.md#locale_format
*/Sankey & Valueformat(const std::string &valueformat ) {
    _sankey.insert({"valueformat", valueformat});
    return *this;
}


/**
Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.
*/Sankey & Valuesuffix(const std::string &valuesuffix ) {
    _sankey.insert({"valuesuffix", valuesuffix});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Sankey & Visible(const json11::Json::object &visible ) {
    _sankey.insert({"visible", visible});
    return *this;
}


 

            json11::Json to_json() const {
                return _sankey;
            }

        private:
            
            json11::Json::object _sankey;

        };
    }
}


