/**
 * @file Violin.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#violin>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Violin/Box.h"
#include "CppPlotly/Trace/Violin/Hoverlabel.h"
#include "CppPlotly/Trace/Violin/Line.h"
#include "CppPlotly/Trace/Violin/Marker.h"
#include "CppPlotly/Trace/Violin/Meanline.h"
#include "CppPlotly/Trace/Violin/Selected.h"
#include "CppPlotly/Trace/Violin/Stream.h"
#include "CppPlotly/Trace/Violin/Transform.h"
#include "CppPlotly/Trace/Violin/Unselected.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * In vertical (horizontal) violin plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one violin per distinct x (y) value is drawn If no `x` (`y`) {array} is provided, a single violin is drawn. That violin position is then positioned with with `name` or with `x0` (`y0`) if provided.
         *
         *
         */ 
        class Violin : public virtual CppPlotly::BaseTrace {
        public:
            Violin() :
                            _violin({
                                {"type", "violin"},
                                    })
                        {}

           /**
Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.
*/Violin & Bandwidth(const double &bandwidth ) {
    _violin.insert({"bandwidth", bandwidth});
    return *this;
}


Violin & Box(const CppPlotly::Trace::violin::Box &box ) {
    _violin.insert({"box", box});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Violin & Customdata(const std::vector<double> &customdata ) {
    _violin.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Violin & Customdatasrc(const std::string &customdatasrc ) {
    _violin.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
*/Violin & Fillcolor(const json11::Json::object &fillcolor ) {
    _violin.insert({"fillcolor", fillcolor});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Violin & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _violin.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Violin & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _violin.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Violin & Hoverlabel(const CppPlotly::Trace::violin::Hoverlabel &hoverlabel ) {
    _violin.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Do the hover effects highlight individual violins or sample points or the kernel density estimate or any combination of them?
*/Violin & Hoveron(const json11::Json::object &hoveron ) {
    _violin.insert({"hoveron", hoveron});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Violin & Ids(const std::vector<double> &ids ) {
    _violin.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Violin & Idssrc(const std::string &idssrc ) {
    _violin.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the violins.
*/Violin & Jitter(const double &jitter ) {
    _violin.insert({"jitter", jitter});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Violin & Legendgroup(const std::string &legendgroup ) {
    _violin.insert({"legendgroup", legendgroup});
    return *this;
}


Violin & Line(const CppPlotly::Trace::violin::Line &line ) {
    _violin.insert({"line", line});
    return *this;
}


Violin & Marker(const CppPlotly::Trace::violin::Marker &marker ) {
    _violin.insert({"marker", marker});
    return *this;
}


Violin & Meanline(const CppPlotly::Trace::violin::Meanline &meanline ) {
    _violin.insert({"meanline", meanline});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical
*/Violin & Name(const std::string &name ) {
    _violin.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the trace.
*/Violin & Opacity(const double &opacity ) {
    _violin.insert({"opacity", opacity});
    return *this;
}


/**
Sets the orientation of the violin(s). If *v* (*h*), the distribution is visualized along the vertical (horizontal).
*/Violin & Orientation(const json11::Json::object &orientation ) {
    _violin.insert({"orientation", orientation});
    return *this;
}


/**
Sets the position of the sample points in relation to the violins. If *0*, the sample points are places over the center of the violins. Positive (negative) values correspond to positions to the right (left) for vertical violins and above (below) for horizontal violins.
*/Violin & Pointpos(const double &pointpos ) {
    _violin.insert({"pointpos", pointpos});
    return *this;
}


/**
If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the violins are shown with no sample points
*/Violin & Points(const json11::Json::object &points ) {
    _violin.insert({"points", points});
    return *this;
}


/**
If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group.
*/Violin & Scalegroup(const std::string &scalegroup ) {
    _violin.insert({"scalegroup", scalegroup});
    return *this;
}


/**
Sets the metric by which the width of each violin is determined.*width* means each violin has the same (max) width*count* means the violins are scaled by the number of sample points makingup each violin.
*/Violin & Scalemode(const json11::Json::object &scalemode ) {
    _violin.insert({"scalemode", scalemode});
    return *this;
}


Violin & Selected(const CppPlotly::Trace::violin::Selected &selected ) {
    _violin.insert({"selected", selected});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Violin & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _violin.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Violin & Showlegend(const bool &showlegend ) {
    _violin.insert({"showlegend", showlegend});
    return *this;
}


/**
Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under *overlay* mode, where one trace has `side` set to *positive* and the other to *negative*.
*/Violin & Side(const json11::Json::object &side ) {
    _violin.insert({"side", side});
    return *this;
}


/**
Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to *manual*.
*/Violin & Span(const std::vector<std::string> &span ) {
    _violin.insert({"span", span});
    return *this;
}


/**
Sets the method by which the span in data space where the density function will be computed. *soft* means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. *hard* means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode *manual* and fill in the `span` attribute.
*/Violin & Spanmode(const json11::Json::object &spanmode ) {
    _violin.insert({"spanmode", spanmode});
    return *this;
}


Violin & Stream(const CppPlotly::Trace::violin::Stream &stream ) {
    _violin.insert({"stream", stream});
    return *this;
}


/**
Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
*/Violin & Text(const json11::Json::object &text ) {
    _violin.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Violin & Textsrc(const std::string &textsrc ) {
    _violin.insert({"textsrc", textsrc});
    return *this;
}


Violin & Transforms(const std::vector<CppPlotly::Trace::violin::Transform> &transforms ) {
    _violin.insert({"transforms", transforms});
    return *this;
}


Violin & Uid(const std::string &uid ) {
    _violin.insert({"uid", uid});
    return *this;
}


Violin & Unselected(const CppPlotly::Trace::violin::Unselected &unselected ) {
    _violin.insert({"unselected", unselected});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Violin & Visible(const json11::Json::object &visible ) {
    _violin.insert({"visible", visible});
    return *this;
}


/**
Sets the x sample data or coordinates. See overview for more info.
*/Violin & X(const std::vector<double> &x ) {
    _violin.insert({"x", x});
    return *this;
}


/**
Sets the x coordinate of the box. See overview for more info.
*/Violin & X0(const json11::Json::object &x0 ) {
    _violin.insert({"x0", x0});
    return *this;
}


/**
Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
*/Violin & Xaxis(const json11::Json::object &xaxis ) {
    _violin.insert({"xaxis", xaxis});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Violin & Xsrc(const std::string &xsrc ) {
    _violin.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets the y sample data or coordinates. See overview for more info.
*/Violin & Y(const std::vector<double> &y ) {
    _violin.insert({"y", y});
    return *this;
}


/**
Sets the y coordinate of the box. See overview for more info.
*/Violin & Y0(const json11::Json::object &y0 ) {
    _violin.insert({"y0", y0});
    return *this;
}


/**
Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
*/Violin & Yaxis(const json11::Json::object &yaxis ) {
    _violin.insert({"yaxis", yaxis});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Violin & Ysrc(const std::string &ysrc ) {
    _violin.insert({"ysrc", ysrc});
    return *this;
}


 

            json11::Json to_json() const {
                return _violin;
            }

        private:
            
            json11::Json::object _violin;

        };
    }
}


