/**
 * @file Scatterpolargl.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#scatterpolargl>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Scatterpolargl/Hoverlabel.h"
#include "CppPlotly/Trace/Scatterpolargl/Line.h"
#include "CppPlotly/Trace/Scatterpolargl/Marker.h"
#include "CppPlotly/Trace/Scatterpolargl/Selected.h"
#include "CppPlotly/Trace/Scatterpolargl/Stream.h"
#include "CppPlotly/Trace/Scatterpolargl/Transform.h"
#include "CppPlotly/Trace/Scatterpolargl/Unselected.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * The scatterpolargl trace type encompasses line charts, scatter charts, and bubble charts in polar coordinates using the WebGL plotting engine. The data visualized as scatter point or lines is set in `r` (radial) and `theta` (angular) coordinates Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays.
         *
         *
         */ 
        class Scatterpolargl : public virtual CppPlotly::BaseTrace {
        public:
            Scatterpolargl() :
                            _scatterpolargl({
                                {"type", "scatterpolargl"},
                                    })
                        {}

           /**
Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
*/Scatterpolargl & Connectgaps(const bool &connectgaps ) {
    _scatterpolargl.insert({"connectgaps", connectgaps});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Scatterpolargl & Customdata(const std::vector<double> &customdata ) {
    _scatterpolargl.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Scatterpolargl & Customdatasrc(const std::string &customdatasrc ) {
    _scatterpolargl.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
*/Scatterpolargl & Fill(const json11::Json::object &fill ) {
    _scatterpolargl.insert({"fill", fill});
    return *this;
}


/**
Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
*/Scatterpolargl & Fillcolor(const json11::Json::object &fillcolor ) {
    _scatterpolargl.insert({"fillcolor", fillcolor});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Scatterpolargl & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _scatterpolargl.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Scatterpolargl & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _scatterpolargl.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Scatterpolargl & Hoverlabel(const CppPlotly::Trace::scatterpolargl::Hoverlabel &hoverlabel ) {
    _scatterpolargl.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
*/Scatterpolargl & Hoveron(const json11::Json::object &hoveron ) {
    _scatterpolargl.insert({"hoveron", hoveron});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Scatterpolargl & Ids(const std::vector<double> &ids ) {
    _scatterpolargl.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Scatterpolargl & Idssrc(const std::string &idssrc ) {
    _scatterpolargl.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Scatterpolargl & Legendgroup(const std::string &legendgroup ) {
    _scatterpolargl.insert({"legendgroup", legendgroup});
    return *this;
}


Scatterpolargl & Line(const CppPlotly::Trace::scatterpolargl::Line &line ) {
    _scatterpolargl.insert({"line", line});
    return *this;
}


Scatterpolargl & Marker(const CppPlotly::Trace::scatterpolargl::Marker &marker ) {
    _scatterpolargl.insert({"marker", marker});
    return *this;
}


/**
Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points, then the default is *lines+markers*. Otherwise, *lines*.
*/Scatterpolargl & Mode(const json11::Json::object &mode ) {
    _scatterpolargl.insert({"mode", mode});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Scatterpolargl & Name(const std::string &name ) {
    _scatterpolargl.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the trace.
*/Scatterpolargl & Opacity(const double &opacity ) {
    _scatterpolargl.insert({"opacity", opacity});
    return *this;
}


/**
Sets the radial coordinates
*/Scatterpolargl & R(const std::vector<double> &r ) {
    _scatterpolargl.insert({"r", r});
    return *this;
}


/**
Sets the source reference on plot.ly for  r .
*/Scatterpolargl & Rsrc(const std::string &rsrc ) {
    _scatterpolargl.insert({"rsrc", rsrc});
    return *this;
}


Scatterpolargl & Selected(const CppPlotly::Trace::scatterpolargl::Selected &selected ) {
    _scatterpolargl.insert({"selected", selected});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Scatterpolargl & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _scatterpolargl.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Scatterpolargl & Showlegend(const bool &showlegend ) {
    _scatterpolargl.insert({"showlegend", showlegend});
    return *this;
}


Scatterpolargl & Stream(const CppPlotly::Trace::scatterpolargl::Stream &stream ) {
    _scatterpolargl.insert({"stream", stream});
    return *this;
}


/**
Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.
*/Scatterpolargl & Subplot(const json11::Json::object &subplot ) {
    _scatterpolargl.insert({"subplot", subplot});
    return *this;
}


/**
Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
*/Scatterpolargl & Text(const json11::Json::object &text ) {
    _scatterpolargl.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Scatterpolargl & Textsrc(const std::string &textsrc ) {
    _scatterpolargl.insert({"textsrc", textsrc});
    return *this;
}


/**
Sets the angular coordinates
*/Scatterpolargl & Theta(const std::vector<double> &theta ) {
    _scatterpolargl.insert({"theta", theta});
    return *this;
}


/**
Sets the source reference on plot.ly for  theta .
*/Scatterpolargl & Thetasrc(const std::string &thetasrc ) {
    _scatterpolargl.insert({"thetasrc", thetasrc});
    return *this;
}


/**
Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.
*/Scatterpolargl & Thetaunit(const json11::Json::object &thetaunit ) {
    _scatterpolargl.insert({"thetaunit", thetaunit});
    return *this;
}


Scatterpolargl & Transforms(const std::vector<CppPlotly::Trace::scatterpolargl::Transform> &transforms ) {
    _scatterpolargl.insert({"transforms", transforms});
    return *this;
}


Scatterpolargl & Uid(const std::string &uid ) {
    _scatterpolargl.insert({"uid", uid});
    return *this;
}


Scatterpolargl & Unselected(const CppPlotly::Trace::scatterpolargl::Unselected &unselected ) {
    _scatterpolargl.insert({"unselected", unselected});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Scatterpolargl & Visible(const json11::Json::object &visible ) {
    _scatterpolargl.insert({"visible", visible});
    return *this;
}


 

            json11::Json to_json() const {
                return _scatterpolargl;
            }

        private:
            
            json11::Json::object _scatterpolargl;

        };
    }
}


