/**
 * @file Scattergl.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#scattergl>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Scattergl/Error_x.h"
#include "CppPlotly/Trace/Scattergl/Error_y.h"
#include "CppPlotly/Trace/Scattergl/Hoverlabel.h"
#include "CppPlotly/Trace/Scattergl/Line.h"
#include "CppPlotly/Trace/Scattergl/Marker.h"
#include "CppPlotly/Trace/Scattergl/Selected.h"
#include "CppPlotly/Trace/Scattergl/Stream.h"
#include "CppPlotly/Trace/Scattergl/Transform.h"
#include "CppPlotly/Trace/Scattergl/Unselected.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * The data visualized as scatter point or lines is set in `x` and `y` using the WebGL plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays.
         *
         *
         */ 
        class Scattergl : public virtual CppPlotly::BaseTrace {
        public:
            Scattergl() :
                            _scattergl({
                                {"type", "scattergl"},
                                    })
                        {}

           /**
Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
*/Scattergl & Connectgaps(const bool &connectgaps ) {
    _scattergl.insert({"connectgaps", connectgaps});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Scattergl & Customdata(const std::vector<double> &customdata ) {
    _scattergl.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Scattergl & Customdata(const std::vector<std::string> &customdata ) {
    _scattergl.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Scattergl & Customdata(const json11::Json::object &customdata ) {
    _scattergl.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Scattergl & Customdatasrc(const std::string &customdatasrc ) {
    _scattergl.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the x coordinate step. See `x0` for more info.
*/Scattergl & Dx(const double &dx ) {
    _scattergl.insert({"dx", dx});
    return *this;
}


/**
Sets the y coordinate step. See `y0` for more info.
*/Scattergl & Dy(const double &dy ) {
    _scattergl.insert({"dy", dy});
    return *this;
}


Scattergl & Error_x(const CppPlotly::Trace::scattergl::Error_x &error_x ) {
    _scattergl.insert({"error_x", error_x});
    return *this;
}


Scattergl & Error_y(const CppPlotly::Trace::scattergl::Error_y &error_y ) {
    _scattergl.insert({"error_y", error_y});
    return *this;
}


/**
Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
*/Scattergl & Fill(const json11::Json::object &fill ) {
    _scattergl.insert({"fill", fill});
    return *this;
}


/**
Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
*/Scattergl & Fillcolor(const json11::Json::object &fillcolor ) {
    _scattergl.insert({"fillcolor", fillcolor});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Scattergl & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _scattergl.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Scattergl & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _scattergl.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Scattergl & Hoverlabel(const CppPlotly::Trace::scattergl::Hoverlabel &hoverlabel ) {
    _scattergl.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
*/Scattergl & Hoveron(const json11::Json::object &hoveron ) {
    _scattergl.insert({"hoveron", hoveron});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Scattergl & Ids(const std::vector<double> &ids ) {
    _scattergl.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Scattergl & Ids(const std::vector<std::string> &ids ) {
    _scattergl.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Scattergl & Ids(const json11::Json::object &ids ) {
    _scattergl.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Scattergl & Idssrc(const std::string &idssrc ) {
    _scattergl.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Scattergl & Legendgroup(const std::string &legendgroup ) {
    _scattergl.insert({"legendgroup", legendgroup});
    return *this;
}


Scattergl & Line(const CppPlotly::Trace::scattergl::Line &line ) {
    _scattergl.insert({"line", line});
    return *this;
}


Scattergl & Marker(const CppPlotly::Trace::scattergl::Marker &marker ) {
    _scattergl.insert({"marker", marker});
    return *this;
}


/**
Determines the drawing mode for this scatter trace.
*/Scattergl & Mode(const json11::Json::object &mode ) {
    _scattergl.insert({"mode", mode});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Scattergl & Name(const std::string &name ) {
    _scattergl.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the trace.
*/Scattergl & Opacity(const double &opacity ) {
    _scattergl.insert({"opacity", opacity});
    return *this;
}


Scattergl & Selected(const CppPlotly::Trace::scattergl::Selected &selected ) {
    _scattergl.insert({"selected", selected});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Scattergl & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _scattergl.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Scattergl & Showlegend(const bool &showlegend ) {
    _scattergl.insert({"showlegend", showlegend});
    return *this;
}


Scattergl & Stream(const CppPlotly::Trace::scattergl::Stream &stream ) {
    _scattergl.insert({"stream", stream});
    return *this;
}


/**
Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.
*/Scattergl & Text(const json11::Json::object &text ) {
    _scattergl.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Scattergl & Textsrc(const std::string &textsrc ) {
    _scattergl.insert({"textsrc", textsrc});
    return *this;
}


Scattergl & Transforms(const std::vector<CppPlotly::Trace::scattergl::Transform> &transforms ) {
    _scattergl.insert({"transforms", transforms});
    return *this;
}


Scattergl & Uid(const std::string &uid ) {
    _scattergl.insert({"uid", uid});
    return *this;
}


Scattergl & Unselected(const CppPlotly::Trace::scattergl::Unselected &unselected ) {
    _scattergl.insert({"unselected", unselected});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Scattergl & Visible(const json11::Json::object &visible ) {
    _scattergl.insert({"visible", visible});
    return *this;
}


/**
Sets the x coordinates.
*/Scattergl & X(const std::vector<double> &x ) {
    _scattergl.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates.
*/Scattergl & X(const std::vector<std::string> &x ) {
    _scattergl.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates.
*/Scattergl & X(const json11::Json::object &x ) {
    _scattergl.insert({"x", x});
    return *this;
}


/**
Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
*/Scattergl & X0(const json11::Json::object &x0 ) {
    _scattergl.insert({"x0", x0});
    return *this;
}


/**
Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
*/Scattergl & Xaxis(const json11::Json::object &xaxis ) {
    _scattergl.insert({"xaxis", xaxis});
    return *this;
}


/**
Sets the calendar system to use with `x` date data.
*/Scattergl & Xcalendar(const json11::Json::object &xcalendar ) {
    _scattergl.insert({"xcalendar", xcalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Scattergl & Xsrc(const std::string &xsrc ) {
    _scattergl.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets the y coordinates.
*/Scattergl & Y(const std::vector<double> &y ) {
    _scattergl.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates.
*/Scattergl & Y(const std::vector<std::string> &y ) {
    _scattergl.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates.
*/Scattergl & Y(const json11::Json::object &y ) {
    _scattergl.insert({"y", y});
    return *this;
}


/**
Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
*/Scattergl & Y0(const json11::Json::object &y0 ) {
    _scattergl.insert({"y0", y0});
    return *this;
}


/**
Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
*/Scattergl & Yaxis(const json11::Json::object &yaxis ) {
    _scattergl.insert({"yaxis", yaxis});
    return *this;
}


/**
Sets the calendar system to use with `y` date data.
*/Scattergl & Ycalendar(const json11::Json::object &ycalendar ) {
    _scattergl.insert({"ycalendar", ycalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Scattergl & Ysrc(const std::string &ysrc ) {
    _scattergl.insert({"ysrc", ysrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _scattergl;
            }

        private:
            
            json11::Json::object _scattergl;

        };
    }
}


