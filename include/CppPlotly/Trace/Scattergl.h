/**
 * @file Scattergl.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#scattergl>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Scattergl/Error_x.h"
#include "CppPlotly/Trace/Scattergl/Error_y.h"
#include "CppPlotly/Trace/Scattergl/Hoverlabel.h"
#include "CppPlotly/Trace/Scattergl/Line.h"
#include "CppPlotly/Trace/Scattergl/Marker.h"
#include "CppPlotly/Trace/Scattergl/Selected.h"
#include "CppPlotly/Trace/Scattergl/Stream.h"
#include "CppPlotly/Trace/Scattergl/Textfont.h"
#include "CppPlotly/Trace/Scattergl/Transform.h"
#include "CppPlotly/Trace/Scattergl/Unselected.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * The data visualized as scatter point or lines is set in `x` and `y` using the WebGL plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays.
         *
         *
         */ 
        class Scattergl : public virtual CppPlotly::BaseTrace {
        public:
            Scattergl() :
                            _scattergl({
                                {"type", "scattergl"},
                                    })
                        {}

           /**
Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
*/Scattergl & Connectgaps(const bool &connectgaps ) {
    _scattergl.insert({"connectgaps", connectgaps});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Scattergl & Customdata(const std::vector<double> &customdata ) {
    _scattergl.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Scattergl & Customdata(const std::vector<std::string> &customdata ) {
    _scattergl.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Scattergl & Customdata(const json11::Json &customdata ) {
    _scattergl.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Scattergl & Customdatasrc(const std::string &customdatasrc ) {
    _scattergl.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the x coordinate step. See `x0` for more info.
*/Scattergl & Dx(const double &dx ) {
    _scattergl.insert({"dx", dx});
    return *this;
}


/**
Sets the y coordinate step. See `y0` for more info.
*/Scattergl & Dy(const double &dy ) {
    _scattergl.insert({"dy", dy});
    return *this;
}


Scattergl & Error_x(const CppPlotly::Trace::scattergl::Error_x &error_x ) {
    _scattergl.insert({"error_x", error_x});
    return *this;
}


Scattergl & Error_y(const CppPlotly::Trace::scattergl::Error_y &error_y ) {
    _scattergl.insert({"error_y", error_y});
    return *this;
}


/**
Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.
*/Scattergl & Fill(const json11::Json &fill ) {
    _scattergl.insert({"fill", fill});
    return *this;
}


/**
Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
*/Scattergl & Fillcolor(const json11::Json &fillcolor ) {
    _scattergl.insert({"fillcolor", fillcolor});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Scattergl & Hoverinfo(const json11::Json &hoverinfo ) {
    _scattergl.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Scattergl & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _scattergl.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Scattergl & Hoverlabel(const CppPlotly::Trace::scattergl::Hoverlabel &hoverlabel ) {
    _scattergl.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". See https://github.com/d3/d3-format/blob/master/README.md#locale_format for details on the formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plot.ly/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
*/Scattergl & Hovertemplate(const json11::Json &hovertemplate ) {
    _scattergl.insert({"hovertemplate", hovertemplate});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertemplate .
*/Scattergl & Hovertemplatesrc(const std::string &hovertemplatesrc ) {
    _scattergl.insert({"hovertemplatesrc", hovertemplatesrc});
    return *this;
}


/**
Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
*/Scattergl & Hovertext(const json11::Json &hovertext ) {
    _scattergl.insert({"hovertext", hovertext});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertext .
*/Scattergl & Hovertextsrc(const std::string &hovertextsrc ) {
    _scattergl.insert({"hovertextsrc", hovertextsrc});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Scattergl & Ids(const std::vector<double> &ids ) {
    _scattergl.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Scattergl & Ids(const std::vector<std::string> &ids ) {
    _scattergl.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Scattergl & Ids(const json11::Json &ids ) {
    _scattergl.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Scattergl & Idssrc(const std::string &idssrc ) {
    _scattergl.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Scattergl & Legendgroup(const std::string &legendgroup ) {
    _scattergl.insert({"legendgroup", legendgroup});
    return *this;
}


Scattergl & Line(const CppPlotly::Trace::scattergl::Line &line ) {
    _scattergl.insert({"line", line});
    return *this;
}


Scattergl & Marker(const CppPlotly::Trace::scattergl::Marker &marker ) {
    _scattergl.insert({"marker", marker});
    return *this;
}


/**
Determines the drawing mode for this scatter trace.
*/Scattergl & Mode(const json11::Json &mode ) {
    _scattergl.insert({"mode", mode});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Scattergl & Name(const std::string &name ) {
    _scattergl.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the trace.
*/Scattergl & Opacity(const double &opacity ) {
    _scattergl.insert({"opacity", opacity});
    return *this;
}


Scattergl & Selected(const CppPlotly::Trace::scattergl::Selected &selected ) {
    _scattergl.insert({"selected", selected});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Scattergl & Selectedpoints(const json11::Json &selectedpoints ) {
    _scattergl.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Scattergl & Showlegend(const bool &showlegend ) {
    _scattergl.insert({"showlegend", showlegend});
    return *this;
}


Scattergl & Stream(const CppPlotly::Trace::scattergl::Stream &stream ) {
    _scattergl.insert({"stream", stream});
    return *this;
}


/**
Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
*/Scattergl & Text(const json11::Json &text ) {
    _scattergl.insert({"text", text});
    return *this;
}


Scattergl & Textfont(const CppPlotly::Trace::scattergl::Textfont &textfont ) {
    _scattergl.insert({"textfont", textfont});
    return *this;
}


/**
Sets the positions of the `text` elements with respects to the (x,y) coordinates.
*/Scattergl & Textposition(const json11::Json &textposition ) {
    _scattergl.insert({"textposition", textposition});
    return *this;
}


/**
Sets the source reference on plot.ly for  textposition .
*/Scattergl & Textpositionsrc(const std::string &textpositionsrc ) {
    _scattergl.insert({"textpositionsrc", textpositionsrc});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Scattergl & Textsrc(const std::string &textsrc ) {
    _scattergl.insert({"textsrc", textsrc});
    return *this;
}


Scattergl & Transforms(const std::vector<CppPlotly::Trace::scattergl::Transform> &transforms ) {
    _scattergl.insert({"transforms", transforms});
    return *this;
}


/**
Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
*/Scattergl & Uid(const std::string &uid ) {
    _scattergl.insert({"uid", uid});
    return *this;
}


/**
Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
*/Scattergl & Uirevision(const json11::Json &uirevision ) {
    _scattergl.insert({"uirevision", uirevision});
    return *this;
}


Scattergl & Unselected(const CppPlotly::Trace::scattergl::Unselected &unselected ) {
    _scattergl.insert({"unselected", unselected});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Scattergl & Visible(const json11::Json &visible ) {
    _scattergl.insert({"visible", visible});
    return *this;
}


/**
Sets the x coordinates.
*/Scattergl & X(const std::vector<double> &x ) {
    _scattergl.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates.
*/Scattergl & X(const std::vector<std::string> &x ) {
    _scattergl.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates.
*/Scattergl & X(const json11::Json &x ) {
    _scattergl.insert({"x", x});
    return *this;
}


/**
Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
*/Scattergl & X0(const json11::Json &x0 ) {
    _scattergl.insert({"x0", x0});
    return *this;
}


/**
Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
*/Scattergl & Xaxis(const json11::Json &xaxis ) {
    _scattergl.insert({"xaxis", xaxis});
    return *this;
}


/**
Sets the calendar system to use with `x` date data.
*/Scattergl & Xcalendar(const json11::Json &xcalendar ) {
    _scattergl.insert({"xcalendar", xcalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Scattergl & Xsrc(const std::string &xsrc ) {
    _scattergl.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets the y coordinates.
*/Scattergl & Y(const std::vector<double> &y ) {
    _scattergl.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates.
*/Scattergl & Y(const std::vector<std::string> &y ) {
    _scattergl.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates.
*/Scattergl & Y(const json11::Json &y ) {
    _scattergl.insert({"y", y});
    return *this;
}


/**
Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
*/Scattergl & Y0(const json11::Json &y0 ) {
    _scattergl.insert({"y0", y0});
    return *this;
}


/**
Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
*/Scattergl & Yaxis(const json11::Json &yaxis ) {
    _scattergl.insert({"yaxis", yaxis});
    return *this;
}


/**
Sets the calendar system to use with `y` date data.
*/Scattergl & Ycalendar(const json11::Json &ycalendar ) {
    _scattergl.insert({"ycalendar", ycalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Scattergl & Ysrc(const std::string &ysrc ) {
    _scattergl.insert({"ysrc", ysrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _scattergl;
            }

        private:
            
            json11::Json::object _scattergl;

        };
    }
}


