/**
 * @file Lighting.h
This attribute is part of the possible options for the trace cone.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#cone>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>




namespace CppPlotly {
    namespace Trace {
    namespace cone {

    /**
     * 
     *
     *
     */
    class Lighting {
    public:

    /**
Ambient light increases overall color visibility but can wash out the image.
*/Lighting & Ambient(const double &ambient ) {
    _lighting.insert({"ambient", ambient});
    return *this;
}


/**
Represents the extent that incident rays are reflected in a range of angles.
*/Lighting & Diffuse(const double &diffuse ) {
    _lighting.insert({"diffuse", diffuse});
    return *this;
}


/**
Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
*/Lighting & Facenormalsepsilon(const double &facenormalsepsilon ) {
    _lighting.insert({"facenormalsepsilon", facenormalsepsilon});
    return *this;
}


/**
Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
*/Lighting & Fresnel(const double &fresnel ) {
    _lighting.insert({"fresnel", fresnel});
    return *this;
}


/**
Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
*/Lighting & Roughness(const double &roughness ) {
    _lighting.insert({"roughness", roughness});
    return *this;
}


/**
Represents the level that incident rays are reflected in a single direction, causing shine.
*/Lighting & Specular(const double &specular ) {
    _lighting.insert({"specular", specular});
    return *this;
}


/**
Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
*/Lighting & Vertexnormalsepsilon(const double &vertexnormalsepsilon ) {
    _lighting.insert({"vertexnormalsepsilon", vertexnormalsepsilon});
    return *this;
}




    json11::Json to_json() const {
        return _lighting;
    }

    private:

    json11::Json::object _lighting;

    };

    }

    }
}
