/**
 * @file Marker.h
This attribute is part of the possible options for the trace area.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#area>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>




namespace CppPlotly {
    namespace Trace {
    namespace area {

    /**
     * 
     *
     *
     */
    class Marker {
    public:

    /**
Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.
*/Marker & Color(const json11::Json::object &color ) {
    _marker.insert({"color", color});
    return *this;
}


/**
Sets the source reference on plot.ly for  color .
*/Marker & Colorsrc(const std::string &colorsrc ) {
    _marker.insert({"colorsrc", colorsrc});
    return *this;
}


/**
Sets the marker opacity.
*/Marker & Opacity(const json11::Json::object &opacity ) {
    _marker.insert({"opacity", opacity});
    return *this;
}


/**
Sets the source reference on plot.ly for  opacity .
*/Marker & Opacitysrc(const std::string &opacitysrc ) {
    _marker.insert({"opacitysrc", opacitysrc});
    return *this;
}


/**
Sets the marker size (in px).
*/Marker & Size(const json11::Json::object &size ) {
    _marker.insert({"size", size});
    return *this;
}


/**
Sets the source reference on plot.ly for  size .
*/Marker & Sizesrc(const std::string &sizesrc ) {
    _marker.insert({"sizesrc", sizesrc});
    return *this;
}


/**
Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
*/Marker & Symbol(const json11::Json::object &symbol ) {
    _marker.insert({"symbol", symbol});
    return *this;
}


/**
Sets the source reference on plot.ly for  symbol .
*/Marker & Symbolsrc(const std::string &symbolsrc ) {
    _marker.insert({"symbolsrc", symbolsrc});
    return *this;
}




    json11::Json to_json() const {
        return _marker;
    }

    private:

    json11::Json::object _marker;

    };

    }

    }
}
