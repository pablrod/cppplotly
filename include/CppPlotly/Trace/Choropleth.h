/**
 * @file Choropleth.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#choropleth>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Choropleth/Colorbar.h"
#include "CppPlotly/Trace/Choropleth/Hoverlabel.h"
#include "CppPlotly/Trace/Choropleth/Marker.h"
#include "CppPlotly/Trace/Choropleth/Selected.h"
#include "CppPlotly/Trace/Choropleth/Stream.h"
#include "CppPlotly/Trace/Choropleth/Transform.h"
#include "CppPlotly/Trace/Choropleth/Unselected.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * The data that describes the choropleth value-to-color mapping is set in `z`. The geographic locations corresponding to each value in `z` are set in `locations`.
         *
         *
         */ 
        class Choropleth : public virtual CppPlotly::BaseTrace {
        public:
            Choropleth() :
                            _choropleth({
                                {"type", "choropleth"},
                                    })
                        {}

           /**
Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
*/Choropleth & Autocolorscale(const bool &autocolorscale ) {
    _choropleth.insert({"autocolorscale", autocolorscale});
    return *this;
}


Choropleth & Colorbar(const CppPlotly::Trace::choropleth::Colorbar &colorbar ) {
    _choropleth.insert({"colorbar", colorbar});
    return *this;
}


/**
Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
*/Choropleth & Colorscale(const json11::Json &colorscale ) {
    _choropleth.insert({"colorscale", colorscale});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Choropleth & Customdata(const std::vector<double> &customdata ) {
    _choropleth.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Choropleth & Customdata(const std::vector<std::string> &customdata ) {
    _choropleth.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Choropleth & Customdata(const json11::Json &customdata ) {
    _choropleth.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Choropleth & Customdatasrc(const std::string &customdatasrc ) {
    _choropleth.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.
*/Choropleth & Geo(const json11::Json &geo ) {
    _choropleth.insert({"geo", geo});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Choropleth & Hoverinfo(const json11::Json &hoverinfo ) {
    _choropleth.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Choropleth & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _choropleth.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Choropleth & Hoverlabel(const CppPlotly::Trace::choropleth::Hoverlabel &hoverlabel ) {
    _choropleth.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". See https://github.com/d3/d3-format/blob/master/README.md#locale_format for details on the formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plot.ly/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
*/Choropleth & Hovertemplate(const json11::Json &hovertemplate ) {
    _choropleth.insert({"hovertemplate", hovertemplate});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertemplate .
*/Choropleth & Hovertemplatesrc(const std::string &hovertemplatesrc ) {
    _choropleth.insert({"hovertemplatesrc", hovertemplatesrc});
    return *this;
}


/**
Same as `text`.
*/Choropleth & Hovertext(const json11::Json &hovertext ) {
    _choropleth.insert({"hovertext", hovertext});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertext .
*/Choropleth & Hovertextsrc(const std::string &hovertextsrc ) {
    _choropleth.insert({"hovertextsrc", hovertextsrc});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Choropleth & Ids(const std::vector<double> &ids ) {
    _choropleth.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Choropleth & Ids(const std::vector<std::string> &ids ) {
    _choropleth.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Choropleth & Ids(const json11::Json &ids ) {
    _choropleth.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Choropleth & Idssrc(const std::string &idssrc ) {
    _choropleth.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Choropleth & Legendgroup(const std::string &legendgroup ) {
    _choropleth.insert({"legendgroup", legendgroup});
    return *this;
}


/**
Determines the set of locations used to match entries in `locations` to regions on the map.
*/Choropleth & Locationmode(const json11::Json &locationmode ) {
    _choropleth.insert({"locationmode", locationmode});
    return *this;
}


/**
Sets the coordinates via location IDs or names. See `locationmode` for more info.
*/Choropleth & Locations(const std::vector<double> &locations ) {
    _choropleth.insert({"locations", locations});
    return *this;
}


/**
Sets the coordinates via location IDs or names. See `locationmode` for more info.
*/Choropleth & Locations(const std::vector<std::string> &locations ) {
    _choropleth.insert({"locations", locations});
    return *this;
}


/**
Sets the coordinates via location IDs or names. See `locationmode` for more info.
*/Choropleth & Locations(const json11::Json &locations ) {
    _choropleth.insert({"locations", locations});
    return *this;
}


/**
Sets the source reference on plot.ly for  locations .
*/Choropleth & Locationssrc(const std::string &locationssrc ) {
    _choropleth.insert({"locationssrc", locationssrc});
    return *this;
}


Choropleth & Marker(const CppPlotly::Trace::choropleth::Marker &marker ) {
    _choropleth.insert({"marker", marker});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Choropleth & Name(const std::string &name ) {
    _choropleth.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the trace.
*/Choropleth & Opacity(const double &opacity ) {
    _choropleth.insert({"opacity", opacity});
    return *this;
}


/**
Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
*/Choropleth & Reversescale(const bool &reversescale ) {
    _choropleth.insert({"reversescale", reversescale});
    return *this;
}


Choropleth & Selected(const CppPlotly::Trace::choropleth::Selected &selected ) {
    _choropleth.insert({"selected", selected});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Choropleth & Selectedpoints(const json11::Json &selectedpoints ) {
    _choropleth.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Choropleth & Showlegend(const bool &showlegend ) {
    _choropleth.insert({"showlegend", showlegend});
    return *this;
}


/**
Determines whether or not a colorbar is displayed for this trace.
*/Choropleth & Showscale(const bool &showscale ) {
    _choropleth.insert({"showscale", showscale});
    return *this;
}


Choropleth & Stream(const CppPlotly::Trace::choropleth::Stream &stream ) {
    _choropleth.insert({"stream", stream});
    return *this;
}


/**
Sets the text elements associated with each location.
*/Choropleth & Text(const json11::Json &text ) {
    _choropleth.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Choropleth & Textsrc(const std::string &textsrc ) {
    _choropleth.insert({"textsrc", textsrc});
    return *this;
}


Choropleth & Transforms(const std::vector<CppPlotly::Trace::choropleth::Transform> &transforms ) {
    _choropleth.insert({"transforms", transforms});
    return *this;
}


/**
Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
*/Choropleth & Uid(const std::string &uid ) {
    _choropleth.insert({"uid", uid});
    return *this;
}


/**
Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
*/Choropleth & Uirevision(const json11::Json &uirevision ) {
    _choropleth.insert({"uirevision", uirevision});
    return *this;
}


Choropleth & Unselected(const CppPlotly::Trace::choropleth::Unselected &unselected ) {
    _choropleth.insert({"unselected", unselected});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Choropleth & Visible(const json11::Json &visible ) {
    _choropleth.insert({"visible", visible});
    return *this;
}


/**
Sets the color values.
*/Choropleth & Z(const std::vector<double> &z ) {
    _choropleth.insert({"z", z});
    return *this;
}


/**
Sets the color values.
*/Choropleth & Z(const std::vector<std::string> &z ) {
    _choropleth.insert({"z", z});
    return *this;
}


/**
Sets the color values.
*/Choropleth & Z(const json11::Json &z ) {
    _choropleth.insert({"z", z});
    return *this;
}


/**
Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
*/Choropleth & Zauto(const bool &zauto ) {
    _choropleth.insert({"zauto", zauto});
    return *this;
}


/**
Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
*/Choropleth & Zmax(const double &zmax ) {
    _choropleth.insert({"zmax", zmax});
    return *this;
}


/**
Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
*/Choropleth & Zmid(const double &zmid ) {
    _choropleth.insert({"zmid", zmid});
    return *this;
}


/**
Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
*/Choropleth & Zmin(const double &zmin ) {
    _choropleth.insert({"zmin", zmin});
    return *this;
}


/**
Sets the source reference on plot.ly for  z .
*/Choropleth & Zsrc(const std::string &zsrc ) {
    _choropleth.insert({"zsrc", zsrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _choropleth;
            }

        private:
            
            json11::Json::object _choropleth;

        };
    }
}


