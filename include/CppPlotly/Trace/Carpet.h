/**
 * @file Carpet.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#carpet>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Carpet/Aaxis.h"
#include "CppPlotly/Trace/Carpet/Baxis.h"
#include "CppPlotly/Trace/Carpet/Font.h"
#include "CppPlotly/Trace/Carpet/Hoverlabel.h"
#include "CppPlotly/Trace/Carpet/Stream.h"
#include "CppPlotly/Trace/Carpet/Transform.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * The data describing carpet axis layout is set in `y` and (optionally) also `x`. If only `y` is present, `x` the plot is interpreted as a cheater plot and is filled in using the `y` values. `x` and `y` may either be 2D arrays matching with each dimension matching that of `a` and `b`, or they may be 1D arrays with total length equal to that of `a` and `b`.
         *
         *
         */ 
        class Carpet : public virtual CppPlotly::BaseTrace {
        public:
            Carpet() :
                            _carpet({
                                {"type", "carpet"},
                                    })
                        {}

           /**
An array containing values of the first parameter value
*/Carpet & A(const std::vector<double> &a ) {
    _carpet.insert({"a", a});
    return *this;
}


/**
Alternate to `a`. Builds a linear space of a coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.
*/Carpet & A0(const double &a0 ) {
    _carpet.insert({"a0", a0});
    return *this;
}


Carpet & Aaxis(const CppPlotly::Trace::carpet::Aaxis &aaxis ) {
    _carpet.insert({"aaxis", aaxis});
    return *this;
}


/**
Sets the source reference on plot.ly for  a .
*/Carpet & Asrc(const std::string &asrc ) {
    _carpet.insert({"asrc", asrc});
    return *this;
}


/**
A two dimensional array of y coordinates at each carpet point.
*/Carpet & B(const std::vector<double> &b ) {
    _carpet.insert({"b", b});
    return *this;
}


/**
Alternate to `b`. Builds a linear space of a coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.
*/Carpet & B0(const double &b0 ) {
    _carpet.insert({"b0", b0});
    return *this;
}


Carpet & Baxis(const CppPlotly::Trace::carpet::Baxis &baxis ) {
    _carpet.insert({"baxis", baxis});
    return *this;
}


/**
Sets the source reference on plot.ly for  b .
*/Carpet & Bsrc(const std::string &bsrc ) {
    _carpet.insert({"bsrc", bsrc});
    return *this;
}


/**
An identifier for this carpet, so that `scattercarpet` and `scattercontour` traces can specify a carpet plot on which they lie
*/Carpet & Carpet(const std::string &carpet ) {
    _carpet.insert({"carpet", carpet});
    return *this;
}


/**
The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been ommitted.
*/Carpet & Cheaterslope(const double &cheaterslope ) {
    _carpet.insert({"cheaterslope", cheaterslope});
    return *this;
}


/**
Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
*/Carpet & Color(const json11::Json::object &color ) {
    _carpet.insert({"color", color});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Carpet & Customdata(const std::vector<double> &customdata ) {
    _carpet.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Carpet & Customdatasrc(const std::string &customdatasrc ) {
    _carpet.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the a coordinate step. See `a0` for more info.
*/Carpet & Da(const double &da ) {
    _carpet.insert({"da", da});
    return *this;
}


/**
Sets the b coordinate step. See `b0` for more info.
*/Carpet & Db(const double &db ) {
    _carpet.insert({"db", db});
    return *this;
}


Carpet & Font(const CppPlotly::Trace::carpet::Font &font ) {
    _carpet.insert({"font", font});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Carpet & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _carpet.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Carpet & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _carpet.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Carpet & Hoverlabel(const CppPlotly::Trace::carpet::Hoverlabel &hoverlabel ) {
    _carpet.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Carpet & Ids(const std::vector<double> &ids ) {
    _carpet.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Carpet & Idssrc(const std::string &idssrc ) {
    _carpet.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Carpet & Legendgroup(const std::string &legendgroup ) {
    _carpet.insert({"legendgroup", legendgroup});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Carpet & Name(const std::string &name ) {
    _carpet.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the trace.
*/Carpet & Opacity(const double &opacity ) {
    _carpet.insert({"opacity", opacity});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Carpet & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _carpet.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Carpet & Showlegend(const bool &showlegend ) {
    _carpet.insert({"showlegend", showlegend});
    return *this;
}


Carpet & Stream(const CppPlotly::Trace::carpet::Stream &stream ) {
    _carpet.insert({"stream", stream});
    return *this;
}


Carpet & Transforms(const std::vector<CppPlotly::Trace::carpet::Transform> &transforms ) {
    _carpet.insert({"transforms", transforms});
    return *this;
}


Carpet & Uid(const std::string &uid ) {
    _carpet.insert({"uid", uid});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Carpet & Visible(const json11::Json::object &visible ) {
    _carpet.insert({"visible", visible});
    return *this;
}


/**
A two dimensional array of x coordinates at each carpet point. If ommitted, the plot is a cheater plot and the xaxis is hidden by default.
*/Carpet & X(const std::vector<double> &x ) {
    _carpet.insert({"x", x});
    return *this;
}


/**
Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
*/Carpet & Xaxis(const json11::Json::object &xaxis ) {
    _carpet.insert({"xaxis", xaxis});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Carpet & Xsrc(const std::string &xsrc ) {
    _carpet.insert({"xsrc", xsrc});
    return *this;
}


/**
A two dimensional array of y coordinates at each carpet point.
*/Carpet & Y(const std::vector<double> &y ) {
    _carpet.insert({"y", y});
    return *this;
}


/**
Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
*/Carpet & Yaxis(const json11::Json::object &yaxis ) {
    _carpet.insert({"yaxis", yaxis});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Carpet & Ysrc(const std::string &ysrc ) {
    _carpet.insert({"ysrc", ysrc});
    return *this;
}


 

            json11::Json to_json() const {
                return _carpet;
            }

        private:
            
            json11::Json::object _carpet;

        };
    }
}


