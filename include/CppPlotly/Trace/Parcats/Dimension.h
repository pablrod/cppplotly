/**
 * @file Dimension.h
This attribute is part of the possible options for the trace parcats.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#parcats>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>




namespace CppPlotly {
    namespace Trace {
    namespace parcats {

    /**
     * 
     *
     *
     */
    class Dimension {
    public:

    /**
Sets the order in which categories in this dimension appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
*/Dimension & Categoryarray(const std::vector<double> &categoryarray ) {
    _dimension.insert({"categoryarray", categoryarray});
    return *this;
}


/**
Sets the order in which categories in this dimension appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
*/Dimension & Categoryarray(const std::vector<std::string> &categoryarray ) {
    _dimension.insert({"categoryarray", categoryarray});
    return *this;
}


/**
Sets the order in which categories in this dimension appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
*/Dimension & Categoryarray(const json11::Json &categoryarray ) {
    _dimension.insert({"categoryarray", categoryarray});
    return *this;
}


/**
Sets the source reference on plot.ly for  categoryarray .
*/Dimension & Categoryarraysrc(const std::string &categoryarraysrc ) {
    _dimension.insert({"categoryarraysrc", categoryarraysrc});
    return *this;
}


/**
Specifies the ordering logic for the categories in the dimension. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.
*/Dimension & Categoryorder(const json11::Json &categoryorder ) {
    _dimension.insert({"categoryorder", categoryorder});
    return *this;
}


Dimension & Description(const json11::Json &description ) {
    _dimension.insert({"description", description});
    return *this;
}


/**
The display index of dimension, from left to right, zero indexed, defaults to dimension index.
*/Dimension & Displayindex(const int &displayindex ) {
    _dimension.insert({"displayindex", displayindex});
    return *this;
}


/**
The shown name of the dimension.
*/Dimension & Label(const std::string &label ) {
    _dimension.insert({"label", label});
    return *this;
}


/**
Sets alternative tick labels for the categories in this dimension. Only has an effect if `categoryorder` is set to *array*. Should be an array the same length as `categoryarray` Used with `categoryorder`.
*/Dimension & Ticktext(const std::vector<double> &ticktext ) {
    _dimension.insert({"ticktext", ticktext});
    return *this;
}


/**
Sets alternative tick labels for the categories in this dimension. Only has an effect if `categoryorder` is set to *array*. Should be an array the same length as `categoryarray` Used with `categoryorder`.
*/Dimension & Ticktext(const std::vector<std::string> &ticktext ) {
    _dimension.insert({"ticktext", ticktext});
    return *this;
}


/**
Sets alternative tick labels for the categories in this dimension. Only has an effect if `categoryorder` is set to *array*. Should be an array the same length as `categoryarray` Used with `categoryorder`.
*/Dimension & Ticktext(const json11::Json &ticktext ) {
    _dimension.insert({"ticktext", ticktext});
    return *this;
}


/**
Sets the source reference on plot.ly for  ticktext .
*/Dimension & Ticktextsrc(const std::string &ticktextsrc ) {
    _dimension.insert({"ticktextsrc", ticktextsrc});
    return *this;
}


/**
Dimension values. `values[n]` represents the category value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated).
*/Dimension & Values(const std::vector<double> &values ) {
    _dimension.insert({"values", values});
    return *this;
}


/**
Dimension values. `values[n]` represents the category value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated).
*/Dimension & Values(const std::vector<std::string> &values ) {
    _dimension.insert({"values", values});
    return *this;
}


/**
Dimension values. `values[n]` represents the category value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated).
*/Dimension & Values(const json11::Json &values ) {
    _dimension.insert({"values", values});
    return *this;
}


/**
Sets the source reference on plot.ly for  values .
*/Dimension & Valuessrc(const std::string &valuessrc ) {
    _dimension.insert({"valuessrc", valuessrc});
    return *this;
}


/**
Shows the dimension when set to `true` (the default). Hides the dimension for `false`.
*/Dimension & Visible(const bool &visible ) {
    _dimension.insert({"visible", visible});
    return *this;
}




    json11::Json to_json() const {
        return _dimension;
    }

    private:

    json11::Json::object _dimension;

    };

    }

    }
}
