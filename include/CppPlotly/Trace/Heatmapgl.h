/**
 * @file Heatmapgl.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#heatmapgl>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Heatmapgl/Colorbar.h"
#include "CppPlotly/Trace/Heatmapgl/Hoverlabel.h"
#include "CppPlotly/Trace/Heatmapgl/Stream.h"
#include "CppPlotly/Trace/Heatmapgl/Transform.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * WebGL version of the heatmap trace type.
         *
         *
         */ 
        class Heatmapgl : public virtual CppPlotly::BaseTrace {
        public:
            Heatmapgl() :
                            _heatmapgl({
                                {"type", "heatmapgl"},
                                    })
                        {}

           /**
Determines whether or not the colorscale is picked using the sign of the input z values.
*/Heatmapgl & Autocolorscale(const bool &autocolorscale ) {
    _heatmapgl.insert({"autocolorscale", autocolorscale});
    return *this;
}


Heatmapgl & Colorbar(const CppPlotly::Trace::heatmapgl::Colorbar &colorbar ) {
    _heatmapgl.insert({"colorbar", colorbar});
    return *this;
}


/**
Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in z space, use zmin and zmax
*/Heatmapgl & Colorscale(const json11::Json::object &colorscale ) {
    _heatmapgl.insert({"colorscale", colorscale});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Heatmapgl & Customdata(const std::vector<double> &customdata ) {
    _heatmapgl.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Heatmapgl & Customdata(const std::vector<std::string> &customdata ) {
    _heatmapgl.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Heatmapgl & Customdata(const json11::Json::object &customdata ) {
    _heatmapgl.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Heatmapgl & Customdatasrc(const std::string &customdatasrc ) {
    _heatmapgl.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the x coordinate step. See `x0` for more info.
*/Heatmapgl & Dx(const double &dx ) {
    _heatmapgl.insert({"dx", dx});
    return *this;
}


/**
Sets the y coordinate step. See `y0` for more info.
*/Heatmapgl & Dy(const double &dy ) {
    _heatmapgl.insert({"dy", dy});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Heatmapgl & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _heatmapgl.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Heatmapgl & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _heatmapgl.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Heatmapgl & Hoverlabel(const CppPlotly::Trace::heatmapgl::Hoverlabel &hoverlabel ) {
    _heatmapgl.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Heatmapgl & Ids(const std::vector<double> &ids ) {
    _heatmapgl.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Heatmapgl & Ids(const std::vector<std::string> &ids ) {
    _heatmapgl.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Heatmapgl & Ids(const json11::Json::object &ids ) {
    _heatmapgl.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Heatmapgl & Idssrc(const std::string &idssrc ) {
    _heatmapgl.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Heatmapgl & Legendgroup(const std::string &legendgroup ) {
    _heatmapgl.insert({"legendgroup", legendgroup});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Heatmapgl & Name(const std::string &name ) {
    _heatmapgl.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the trace.
*/Heatmapgl & Opacity(const double &opacity ) {
    _heatmapgl.insert({"opacity", opacity});
    return *this;
}


/**
Reverses the colorscale.
*/Heatmapgl & Reversescale(const bool &reversescale ) {
    _heatmapgl.insert({"reversescale", reversescale});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Heatmapgl & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _heatmapgl.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Heatmapgl & Showlegend(const bool &showlegend ) {
    _heatmapgl.insert({"showlegend", showlegend});
    return *this;
}


/**
Determines whether or not a colorbar is displayed for this trace.
*/Heatmapgl & Showscale(const bool &showscale ) {
    _heatmapgl.insert({"showscale", showscale});
    return *this;
}


Heatmapgl & Stream(const CppPlotly::Trace::heatmapgl::Stream &stream ) {
    _heatmapgl.insert({"stream", stream});
    return *this;
}


/**
Sets the text elements associated with each z value.
*/Heatmapgl & Text(const std::vector<double> &text ) {
    _heatmapgl.insert({"text", text});
    return *this;
}


/**
Sets the text elements associated with each z value.
*/Heatmapgl & Text(const std::vector<std::string> &text ) {
    _heatmapgl.insert({"text", text});
    return *this;
}


/**
Sets the text elements associated with each z value.
*/Heatmapgl & Text(const json11::Json::object &text ) {
    _heatmapgl.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Heatmapgl & Textsrc(const std::string &textsrc ) {
    _heatmapgl.insert({"textsrc", textsrc});
    return *this;
}


Heatmapgl & Transforms(const std::vector<CppPlotly::Trace::heatmapgl::Transform> &transforms ) {
    _heatmapgl.insert({"transforms", transforms});
    return *this;
}


/**
Transposes the z data.
*/Heatmapgl & Transpose(const bool &transpose ) {
    _heatmapgl.insert({"transpose", transpose});
    return *this;
}


Heatmapgl & Uid(const std::string &uid ) {
    _heatmapgl.insert({"uid", uid});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Heatmapgl & Visible(const json11::Json::object &visible ) {
    _heatmapgl.insert({"visible", visible});
    return *this;
}


/**
Sets the x coordinates.
*/Heatmapgl & X(const std::vector<double> &x ) {
    _heatmapgl.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates.
*/Heatmapgl & X(const std::vector<std::string> &x ) {
    _heatmapgl.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates.
*/Heatmapgl & X(const json11::Json::object &x ) {
    _heatmapgl.insert({"x", x});
    return *this;
}


/**
Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
*/Heatmapgl & X0(const json11::Json::object &x0 ) {
    _heatmapgl.insert({"x0", x0});
    return *this;
}


/**
Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
*/Heatmapgl & Xaxis(const json11::Json::object &xaxis ) {
    _heatmapgl.insert({"xaxis", xaxis});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Heatmapgl & Xsrc(const std::string &xsrc ) {
    _heatmapgl.insert({"xsrc", xsrc});
    return *this;
}


/**
If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
*/Heatmapgl & Xtype(const json11::Json::object &xtype ) {
    _heatmapgl.insert({"xtype", xtype});
    return *this;
}


/**
Sets the y coordinates.
*/Heatmapgl & Y(const std::vector<double> &y ) {
    _heatmapgl.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates.
*/Heatmapgl & Y(const std::vector<std::string> &y ) {
    _heatmapgl.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates.
*/Heatmapgl & Y(const json11::Json::object &y ) {
    _heatmapgl.insert({"y", y});
    return *this;
}


/**
Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
*/Heatmapgl & Y0(const json11::Json::object &y0 ) {
    _heatmapgl.insert({"y0", y0});
    return *this;
}


/**
Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
*/Heatmapgl & Yaxis(const json11::Json::object &yaxis ) {
    _heatmapgl.insert({"yaxis", yaxis});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Heatmapgl & Ysrc(const std::string &ysrc ) {
    _heatmapgl.insert({"ysrc", ysrc});
    return *this;
}


/**
If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
*/Heatmapgl & Ytype(const json11::Json::object &ytype ) {
    _heatmapgl.insert({"ytype", ytype});
    return *this;
}


/**
Sets the z data.
*/Heatmapgl & Z(const std::vector<double> &z ) {
    _heatmapgl.insert({"z", z});
    return *this;
}


/**
Sets the z data.
*/Heatmapgl & Z(const std::vector<std::string> &z ) {
    _heatmapgl.insert({"z", z});
    return *this;
}


/**
Sets the z data.
*/Heatmapgl & Z(const json11::Json::object &z ) {
    _heatmapgl.insert({"z", z});
    return *this;
}


/**
Determines the whether or not the color domain is computed with respect to the input data.
*/Heatmapgl & Zauto(const bool &zauto ) {
    _heatmapgl.insert({"zauto", zauto});
    return *this;
}


/**
Sets the upper bound of color domain.
*/Heatmapgl & Zmax(const double &zmax ) {
    _heatmapgl.insert({"zmax", zmax});
    return *this;
}


/**
Sets the lower bound of color domain.
*/Heatmapgl & Zmin(const double &zmin ) {
    _heatmapgl.insert({"zmin", zmin});
    return *this;
}


/**
Sets the source reference on plot.ly for  z .
*/Heatmapgl & Zsrc(const std::string &zsrc ) {
    _heatmapgl.insert({"zsrc", zsrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _heatmapgl;
            }

        private:
            
            json11::Json::object _heatmapgl;

        };
    }
}


