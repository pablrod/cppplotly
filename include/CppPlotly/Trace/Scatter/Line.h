/**
 * @file Line.h
This attribute is part of the possible options for the trace scatter.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#scatter>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>




namespace CppPlotly {
    namespace Trace {
    namespace scatter {

    /**
     * 
     *
     *
     */
    class Line {
    public:

    /**
Sets the line color.
*/Line & Color(const json11::Json::object &color ) {
    _line.insert({"color", color});
    return *this;
}


/**
Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
*/Line & Dash(const std::string &dash ) {
    _line.insert({"dash", dash});
    return *this;
}


/**
Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
*/Line & Shape(const json11::Json::object &shape ) {
    _line.insert({"shape", shape});
    return *this;
}


/**
Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.
*/Line & Simplify(const bool &simplify ) {
    _line.insert({"simplify", simplify});
    return *this;
}


/**
Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).
*/Line & Smoothing(const double &smoothing ) {
    _line.insert({"smoothing", smoothing});
    return *this;
}


/**
Sets the line width (in px).
*/Line & Width(const double &width ) {
    _line.insert({"width", width});
    return *this;
}




    json11::Json to_json() const {
        return _line;
    }

    private:

    json11::Json::object _line;

    };

    }

    }
}
