/**
 * @file Cone.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#cone>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Cone/Colorbar.h"
#include "CppPlotly/Trace/Cone/Hoverlabel.h"
#include "CppPlotly/Trace/Cone/Lighting.h"
#include "CppPlotly/Trace/Cone/Lightposition.h"
#include "CppPlotly/Trace/Cone/Stream.h"
#include "CppPlotly/Trace/Cone/Transform.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * Use cone traces to visualize vector fields.  Specify a vector field using 6 1D arrays, 3 position arrays `x`, `y` and `z` and 3 vector component arrays `u`, `v`, `w`. The cones are drawn exactly at the positions given by `x`, `y` and `z`.
         *
         *
         */ 
        class Cone : public virtual CppPlotly::BaseTrace {
        public:
            Cone() :
                            _cone({
                                {"type", "cone"},
                                    })
                        {}

           /**
Sets the cones' anchor with respect to their x/y/z positions. Note that *cm* denote the cone's center of mass which corresponds to 1/4 from the tail to tip.
*/Cone & Anchor(const json11::Json::object &anchor ) {
    _cone.insert({"anchor", anchor});
    return *this;
}


/**
Has an effect only if `color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
*/Cone & Autocolorscale(const bool &autocolorscale ) {
    _cone.insert({"autocolorscale", autocolorscale});
    return *this;
}


/**
Has an effect only if `color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.
*/Cone & Cauto(const bool &cauto ) {
    _cone.insert({"cauto", cauto});
    return *this;
}


/**
Has an effect only if `color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `color` array index, and if set, `cmin` must be set as well.
*/Cone & Cmax(const double &cmax ) {
    _cone.insert({"cmax", cmax});
    return *this;
}


/**
Has an effect only if `color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `color` array index, and if set, `cmax` must be set as well.
*/Cone & Cmin(const double &cmin ) {
    _cone.insert({"cmin", cmin});
    return *this;
}


Cone & Colorbar(const CppPlotly::Trace::cone::Colorbar &colorbar ) {
    _cone.insert({"colorbar", colorbar});
    return *this;
}


/**
Sets the colorscale and only has an effect if `color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis, Cividis
*/Cone & Colorscale(const json11::Json::object &colorscale ) {
    _cone.insert({"colorscale", colorscale});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Cone & Customdata(const std::vector<double> &customdata ) {
    _cone.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Cone & Customdata(const std::vector<std::string> &customdata ) {
    _cone.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Cone & Customdata(const json11::Json::object &customdata ) {
    _cone.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Cone & Customdatasrc(const std::string &customdatasrc ) {
    _cone.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Cone & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _cone.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Cone & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _cone.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Cone & Hoverlabel(const CppPlotly::Trace::cone::Hoverlabel &hoverlabel ) {
    _cone.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Cone & Ids(const std::vector<double> &ids ) {
    _cone.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Cone & Ids(const std::vector<std::string> &ids ) {
    _cone.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Cone & Ids(const json11::Json::object &ids ) {
    _cone.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Cone & Idssrc(const std::string &idssrc ) {
    _cone.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Cone & Legendgroup(const std::string &legendgroup ) {
    _cone.insert({"legendgroup", legendgroup});
    return *this;
}


Cone & Lighting(const CppPlotly::Trace::cone::Lighting &lighting ) {
    _cone.insert({"lighting", lighting});
    return *this;
}


Cone & Lightposition(const CppPlotly::Trace::cone::Lightposition &lightposition ) {
    _cone.insert({"lightposition", lightposition});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Cone & Name(const std::string &name ) {
    _cone.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the surface.
*/Cone & Opacity(const double &opacity ) {
    _cone.insert({"opacity", opacity});
    return *this;
}


/**
Has an effect only if `color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).
*/Cone & Reversescale(const bool &reversescale ) {
    _cone.insert({"reversescale", reversescale});
    return *this;
}


/**
Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
*/Cone & Scene(const json11::Json::object &scene ) {
    _cone.insert({"scene", scene});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Cone & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _cone.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Cone & Showlegend(const bool &showlegend ) {
    _cone.insert({"showlegend", showlegend});
    return *this;
}


/**
Determines whether or not a colorbar is displayed for this trace.
*/Cone & Showscale(const bool &showscale ) {
    _cone.insert({"showscale", showscale});
    return *this;
}


/**
Sets the mode by which the cones are sized. If *scaled*, `sizeref` scales such that the reference cone size for the maximum vector magnitude is 1. If *absolute*, `sizeref` scales such that the reference cone size for vector magnitude 1 is one grid unit.
*/Cone & Sizemode(const json11::Json::object &sizemode ) {
    _cone.insert({"sizemode", sizemode});
    return *this;
}


/**
Sets the cone size reference value.
*/Cone & Sizeref(const double &sizeref ) {
    _cone.insert({"sizeref", sizeref});
    return *this;
}


Cone & Stream(const CppPlotly::Trace::cone::Stream &stream ) {
    _cone.insert({"stream", stream});
    return *this;
}


/**
Sets the text elements associated with the cones. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
*/Cone & Text(const json11::Json::object &text ) {
    _cone.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Cone & Textsrc(const std::string &textsrc ) {
    _cone.insert({"textsrc", textsrc});
    return *this;
}


Cone & Transforms(const std::vector<CppPlotly::Trace::cone::Transform> &transforms ) {
    _cone.insert({"transforms", transforms});
    return *this;
}


/**
Sets the x components of the vector field.
*/Cone & U(const std::vector<double> &u ) {
    _cone.insert({"u", u});
    return *this;
}


/**
Sets the x components of the vector field.
*/Cone & U(const std::vector<std::string> &u ) {
    _cone.insert({"u", u});
    return *this;
}


/**
Sets the x components of the vector field.
*/Cone & U(const json11::Json::object &u ) {
    _cone.insert({"u", u});
    return *this;
}


Cone & Uid(const std::string &uid ) {
    _cone.insert({"uid", uid});
    return *this;
}


/**
Sets the source reference on plot.ly for  u .
*/Cone & Usrc(const std::string &usrc ) {
    _cone.insert({"usrc", usrc});
    return *this;
}


/**
Sets the y components of the vector field.
*/Cone & V(const std::vector<double> &v ) {
    _cone.insert({"v", v});
    return *this;
}


/**
Sets the y components of the vector field.
*/Cone & V(const std::vector<std::string> &v ) {
    _cone.insert({"v", v});
    return *this;
}


/**
Sets the y components of the vector field.
*/Cone & V(const json11::Json::object &v ) {
    _cone.insert({"v", v});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Cone & Visible(const json11::Json::object &visible ) {
    _cone.insert({"visible", visible});
    return *this;
}


/**
Sets the source reference on plot.ly for  v .
*/Cone & Vsrc(const std::string &vsrc ) {
    _cone.insert({"vsrc", vsrc});
    return *this;
}


/**
Sets the z components of the vector field.
*/Cone & W(const std::vector<double> &w ) {
    _cone.insert({"w", w});
    return *this;
}


/**
Sets the z components of the vector field.
*/Cone & W(const std::vector<std::string> &w ) {
    _cone.insert({"w", w});
    return *this;
}


/**
Sets the z components of the vector field.
*/Cone & W(const json11::Json::object &w ) {
    _cone.insert({"w", w});
    return *this;
}


/**
Sets the source reference on plot.ly for  w .
*/Cone & Wsrc(const std::string &wsrc ) {
    _cone.insert({"wsrc", wsrc});
    return *this;
}


/**
Sets the x coordinates of the vector field and of the displayed cones.
*/Cone & X(const std::vector<double> &x ) {
    _cone.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates of the vector field and of the displayed cones.
*/Cone & X(const std::vector<std::string> &x ) {
    _cone.insert({"x", x});
    return *this;
}


/**
Sets the x coordinates of the vector field and of the displayed cones.
*/Cone & X(const json11::Json::object &x ) {
    _cone.insert({"x", x});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Cone & Xsrc(const std::string &xsrc ) {
    _cone.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets the y coordinates of the vector field and of the displayed cones.
*/Cone & Y(const std::vector<double> &y ) {
    _cone.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates of the vector field and of the displayed cones.
*/Cone & Y(const std::vector<std::string> &y ) {
    _cone.insert({"y", y});
    return *this;
}


/**
Sets the y coordinates of the vector field and of the displayed cones.
*/Cone & Y(const json11::Json::object &y ) {
    _cone.insert({"y", y});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Cone & Ysrc(const std::string &ysrc ) {
    _cone.insert({"ysrc", ysrc});
    return *this;
}


/**
Sets the z coordinates of the vector field and of the displayed cones.
*/Cone & Z(const std::vector<double> &z ) {
    _cone.insert({"z", z});
    return *this;
}


/**
Sets the z coordinates of the vector field and of the displayed cones.
*/Cone & Z(const std::vector<std::string> &z ) {
    _cone.insert({"z", z});
    return *this;
}


/**
Sets the z coordinates of the vector field and of the displayed cones.
*/Cone & Z(const json11::Json::object &z ) {
    _cone.insert({"z", z});
    return *this;
}


/**
Sets the source reference on plot.ly for  z .
*/Cone & Zsrc(const std::string &zsrc ) {
    _cone.insert({"zsrc", zsrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _cone;
            }

        private:
            
            json11::Json::object _cone;

        };
    }
}


