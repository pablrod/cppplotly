/**
 * @file Dimension.h
This attribute is part of the possible options for the trace parcoords.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#parcoords>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>




namespace CppPlotly {
    namespace Trace {
    namespace parcoords {

    /**
     * 
     *
     *
     */
    class Dimension {
    public:

    /**
The domain range to which the filter on the dimension is constrained. Must be an array of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.
*/Dimension & Constraintrange(const std::vector<std::string> &constraintrange ) {
    _dimension.insert({"constraintrange", constraintrange});
    return *this;
}


Dimension & Description(const json11::Json::object &description ) {
    _dimension.insert({"description", description});
    return *this;
}


/**
The shown name of the dimension.
*/Dimension & Label(const std::string &label ) {
    _dimension.insert({"label", label});
    return *this;
}


/**
Do we allow multiple selection ranges or just a single range?
*/Dimension & Multiselect(const bool &multiselect ) {
    _dimension.insert({"multiselect", multiselect});
    return *this;
}


/**
The domain range that represents the full, shown axis extent. Defaults to the `values` extent. Must be an array of `[fromValue, toValue]` with finite numbers as elements.
*/Dimension & Range(const std::vector<std::string> &range ) {
    _dimension.insert({"range", range});
    return *this;
}


/**
Sets the tick label formatting rule using d3 formatting mini-language which is similar to those of Python. See https://github.com/d3/d3-format/blob/master/README.md#locale_format
*/Dimension & Tickformat(const std::string &tickformat ) {
    _dimension.insert({"tickformat", tickformat});
    return *this;
}


/**
Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
*/Dimension & Ticktext(const std::vector<double> &ticktext ) {
    _dimension.insert({"ticktext", ticktext});
    return *this;
}


/**
Sets the source reference on plot.ly for  ticktext .
*/Dimension & Ticktextsrc(const std::string &ticktextsrc ) {
    _dimension.insert({"ticktextsrc", ticktextsrc});
    return *this;
}


/**
Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
*/Dimension & Tickvals(const std::vector<double> &tickvals ) {
    _dimension.insert({"tickvals", tickvals});
    return *this;
}


/**
Sets the source reference on plot.ly for  tickvals .
*/Dimension & Tickvalssrc(const std::string &tickvalssrc ) {
    _dimension.insert({"tickvalssrc", tickvalssrc});
    return *this;
}


/**
Dimension values. `values[n]` represents the value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated). Each value must be a finite number.
*/Dimension & Values(const std::vector<double> &values ) {
    _dimension.insert({"values", values});
    return *this;
}


/**
Sets the source reference on plot.ly for  values .
*/Dimension & Valuessrc(const std::string &valuessrc ) {
    _dimension.insert({"valuessrc", valuessrc});
    return *this;
}


/**
Shows the dimension when set to `true` (the default). Hides the dimension for `false`.
*/Dimension & Visible(const bool &visible ) {
    _dimension.insert({"visible", visible});
    return *this;
}




    json11::Json to_json() const {
        return _dimension;
    }

    private:

    json11::Json::object _dimension;

    };

    }

    }
}
