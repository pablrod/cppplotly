/**
 * @file Contourcarpet.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#contourcarpet>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Contourcarpet/Colorbar.h"
#include "CppPlotly/Trace/Contourcarpet/Contours.h"
#include "CppPlotly/Trace/Contourcarpet/Hoverlabel.h"
#include "CppPlotly/Trace/Contourcarpet/Line.h"
#include "CppPlotly/Trace/Contourcarpet/Stream.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * Plots contours on either the first carpet axis or the carpet axis with a matching `carpet` attribute. Data `z` is interpreted as matching that of the corresponding carpet axis.
         *
         *
         */ 
        class Contourcarpet : public virtual CppPlotly::BaseTrace {
        public:
            Contourcarpet() :
                            _contourcarpet({
                                {"type", "contourcarpet"},
                                    })
                        {}

           /**
Sets the x coordinates.
*/Contourcarpet & A(const std::vector<double> &a ) {
    _contourcarpet.insert({"a", a});
    return *this;
}


/**
Sets the x coordinates.
*/Contourcarpet & A(const std::vector<std::string> &a ) {
    _contourcarpet.insert({"a", a});
    return *this;
}


/**
Sets the x coordinates.
*/Contourcarpet & A(const json11::Json &a ) {
    _contourcarpet.insert({"a", a});
    return *this;
}


/**
Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
*/Contourcarpet & A0(const json11::Json &a0 ) {
    _contourcarpet.insert({"a0", a0});
    return *this;
}


/**
Sets the source reference on plot.ly for  a .
*/Contourcarpet & Asrc(const std::string &asrc ) {
    _contourcarpet.insert({"asrc", asrc});
    return *this;
}


/**
If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
*/Contourcarpet & Atype(const json11::Json &atype ) {
    _contourcarpet.insert({"atype", atype});
    return *this;
}


/**
Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
*/Contourcarpet & Autocolorscale(const bool &autocolorscale ) {
    _contourcarpet.insert({"autocolorscale", autocolorscale});
    return *this;
}


/**
Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.
*/Contourcarpet & Autocontour(const bool &autocontour ) {
    _contourcarpet.insert({"autocontour", autocontour});
    return *this;
}


/**
Sets the y coordinates.
*/Contourcarpet & B(const std::vector<double> &b ) {
    _contourcarpet.insert({"b", b});
    return *this;
}


/**
Sets the y coordinates.
*/Contourcarpet & B(const std::vector<std::string> &b ) {
    _contourcarpet.insert({"b", b});
    return *this;
}


/**
Sets the y coordinates.
*/Contourcarpet & B(const json11::Json &b ) {
    _contourcarpet.insert({"b", b});
    return *this;
}


/**
Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
*/Contourcarpet & B0(const json11::Json &b0 ) {
    _contourcarpet.insert({"b0", b0});
    return *this;
}


/**
Sets the source reference on plot.ly for  b .
*/Contourcarpet & Bsrc(const std::string &bsrc ) {
    _contourcarpet.insert({"bsrc", bsrc});
    return *this;
}


/**
If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
*/Contourcarpet & Btype(const json11::Json &btype ) {
    _contourcarpet.insert({"btype", btype});
    return *this;
}


/**
The `carpet` of the carpet axes on which this contour trace lies
*/Contourcarpet & Carpet(const std::string &carpet ) {
    _contourcarpet.insert({"carpet", carpet});
    return *this;
}


Contourcarpet & Colorbar(const CppPlotly::Trace::contourcarpet::Colorbar &colorbar ) {
    _contourcarpet.insert({"colorbar", colorbar});
    return *this;
}


/**
Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
*/Contourcarpet & Colorscale(const json11::Json &colorscale ) {
    _contourcarpet.insert({"colorscale", colorscale});
    return *this;
}


Contourcarpet & Contours(const CppPlotly::Trace::contourcarpet::Contours &contours ) {
    _contourcarpet.insert({"contours", contours});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Contourcarpet & Customdata(const std::vector<double> &customdata ) {
    _contourcarpet.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Contourcarpet & Customdata(const std::vector<std::string> &customdata ) {
    _contourcarpet.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Contourcarpet & Customdata(const json11::Json &customdata ) {
    _contourcarpet.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Contourcarpet & Customdatasrc(const std::string &customdatasrc ) {
    _contourcarpet.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the x coordinate step. See `x0` for more info.
*/Contourcarpet & Da(const double &da ) {
    _contourcarpet.insert({"da", da});
    return *this;
}


/**
Sets the y coordinate step. See `y0` for more info.
*/Contourcarpet & Db(const double &db ) {
    _contourcarpet.insert({"db", db});
    return *this;
}


/**
Sets the fill color if `contours.type` is *constraint*. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
*/Contourcarpet & Fillcolor(const json11::Json &fillcolor ) {
    _contourcarpet.insert({"fillcolor", fillcolor});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Contourcarpet & Hoverinfo(const json11::Json &hoverinfo ) {
    _contourcarpet.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Contourcarpet & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _contourcarpet.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Contourcarpet & Hoverlabel(const CppPlotly::Trace::contourcarpet::Hoverlabel &hoverlabel ) {
    _contourcarpet.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Same as `text`.
*/Contourcarpet & Hovertext(const std::vector<double> &hovertext ) {
    _contourcarpet.insert({"hovertext", hovertext});
    return *this;
}


/**
Same as `text`.
*/Contourcarpet & Hovertext(const std::vector<std::string> &hovertext ) {
    _contourcarpet.insert({"hovertext", hovertext});
    return *this;
}


/**
Same as `text`.
*/Contourcarpet & Hovertext(const json11::Json &hovertext ) {
    _contourcarpet.insert({"hovertext", hovertext});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertext .
*/Contourcarpet & Hovertextsrc(const std::string &hovertextsrc ) {
    _contourcarpet.insert({"hovertextsrc", hovertextsrc});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Contourcarpet & Ids(const std::vector<double> &ids ) {
    _contourcarpet.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Contourcarpet & Ids(const std::vector<std::string> &ids ) {
    _contourcarpet.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Contourcarpet & Ids(const json11::Json &ids ) {
    _contourcarpet.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Contourcarpet & Idssrc(const std::string &idssrc ) {
    _contourcarpet.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Contourcarpet & Legendgroup(const std::string &legendgroup ) {
    _contourcarpet.insert({"legendgroup", legendgroup});
    return *this;
}


Contourcarpet & Line(const CppPlotly::Trace::contourcarpet::Line &line ) {
    _contourcarpet.insert({"line", line});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Contourcarpet & Name(const std::string &name ) {
    _contourcarpet.insert({"name", name});
    return *this;
}


/**
Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.
*/Contourcarpet & Ncontours(const int &ncontours ) {
    _contourcarpet.insert({"ncontours", ncontours});
    return *this;
}


/**
Sets the opacity of the trace.
*/Contourcarpet & Opacity(const double &opacity ) {
    _contourcarpet.insert({"opacity", opacity});
    return *this;
}


/**
Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
*/Contourcarpet & Reversescale(const bool &reversescale ) {
    _contourcarpet.insert({"reversescale", reversescale});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Contourcarpet & Selectedpoints(const json11::Json &selectedpoints ) {
    _contourcarpet.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Contourcarpet & Showlegend(const bool &showlegend ) {
    _contourcarpet.insert({"showlegend", showlegend});
    return *this;
}


/**
Determines whether or not a colorbar is displayed for this trace.
*/Contourcarpet & Showscale(const bool &showscale ) {
    _contourcarpet.insert({"showscale", showscale});
    return *this;
}


Contourcarpet & Stream(const CppPlotly::Trace::contourcarpet::Stream &stream ) {
    _contourcarpet.insert({"stream", stream});
    return *this;
}


/**
Sets the text elements associated with each z value.
*/Contourcarpet & Text(const std::vector<double> &text ) {
    _contourcarpet.insert({"text", text});
    return *this;
}


/**
Sets the text elements associated with each z value.
*/Contourcarpet & Text(const std::vector<std::string> &text ) {
    _contourcarpet.insert({"text", text});
    return *this;
}


/**
Sets the text elements associated with each z value.
*/Contourcarpet & Text(const json11::Json &text ) {
    _contourcarpet.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Contourcarpet & Textsrc(const std::string &textsrc ) {
    _contourcarpet.insert({"textsrc", textsrc});
    return *this;
}


/**
Transposes the z data.
*/Contourcarpet & Transpose(const bool &transpose ) {
    _contourcarpet.insert({"transpose", transpose});
    return *this;
}


/**
Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
*/Contourcarpet & Uid(const std::string &uid ) {
    _contourcarpet.insert({"uid", uid});
    return *this;
}


/**
Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
*/Contourcarpet & Uirevision(const json11::Json &uirevision ) {
    _contourcarpet.insert({"uirevision", uirevision});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Contourcarpet & Visible(const json11::Json &visible ) {
    _contourcarpet.insert({"visible", visible});
    return *this;
}


/**
Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
*/Contourcarpet & Xaxis(const json11::Json &xaxis ) {
    _contourcarpet.insert({"xaxis", xaxis});
    return *this;
}


/**
Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
*/Contourcarpet & Yaxis(const json11::Json &yaxis ) {
    _contourcarpet.insert({"yaxis", yaxis});
    return *this;
}


/**
Sets the z data.
*/Contourcarpet & Z(const std::vector<double> &z ) {
    _contourcarpet.insert({"z", z});
    return *this;
}


/**
Sets the z data.
*/Contourcarpet & Z(const std::vector<std::string> &z ) {
    _contourcarpet.insert({"z", z});
    return *this;
}


/**
Sets the z data.
*/Contourcarpet & Z(const json11::Json &z ) {
    _contourcarpet.insert({"z", z});
    return *this;
}


/**
Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
*/Contourcarpet & Zauto(const bool &zauto ) {
    _contourcarpet.insert({"zauto", zauto});
    return *this;
}


/**
Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
*/Contourcarpet & Zmax(const double &zmax ) {
    _contourcarpet.insert({"zmax", zmax});
    return *this;
}


/**
Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
*/Contourcarpet & Zmid(const double &zmid ) {
    _contourcarpet.insert({"zmid", zmid});
    return *this;
}


/**
Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
*/Contourcarpet & Zmin(const double &zmin ) {
    _contourcarpet.insert({"zmin", zmin});
    return *this;
}


/**
Sets the source reference on plot.ly for  z .
*/Contourcarpet & Zsrc(const std::string &zsrc ) {
    _contourcarpet.insert({"zsrc", zsrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _contourcarpet;
            }

        private:
            
            json11::Json::object _contourcarpet;

        };
    }
}


