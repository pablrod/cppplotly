/**
 * @file Mesh3d.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#mesh3d>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Mesh3d/Colorbar.h"
#include "CppPlotly/Trace/Mesh3d/Contour.h"
#include "CppPlotly/Trace/Mesh3d/Hoverlabel.h"
#include "CppPlotly/Trace/Mesh3d/Lighting.h"
#include "CppPlotly/Trace/Mesh3d/Lightposition.h"
#include "CppPlotly/Trace/Mesh3d/Stream.h"
#include "CppPlotly/Trace/Mesh3d/Transform.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and (1) a sets of `i`, `j`, `k` indices (2) Delaunay triangulation or (3) the Alpha-shape algorithm or (4) the Convex-hull algorithm
         *
         *
         */ 
        class Mesh3d : public virtual CppPlotly::BaseTrace {
        public:
            Mesh3d() :
                            _mesh3d({
                                {"type", "mesh3d"},
                                    })
                        {}

           /**
Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If *-1*, Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.
*/Mesh3d & Alphahull(const double &alphahull ) {
    _mesh3d.insert({"alphahull", alphahull});
    return *this;
}


/**
Has an effect only if `color` is set to a numerical array. Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
*/Mesh3d & Autocolorscale(const bool &autocolorscale ) {
    _mesh3d.insert({"autocolorscale", autocolorscale});
    return *this;
}


/**
Has an effect only if `color` is set to a numerical array and `cmin`, `cmax` are set by the user. In this case, it controls whether the range of colors in `colorscale` is mapped to the range of values in the `color` array (`cauto: true`), or the `cmin`/`cmax` values (`cauto: false`). Defaults to `false` when `cmin`, `cmax` are set by the user.
*/Mesh3d & Cauto(const bool &cauto ) {
    _mesh3d.insert({"cauto", cauto});
    return *this;
}


/**
Has an effect only if `color` is set to a numerical array. Sets the upper bound of the color domain. Value should be associated to the `color` array index, and if set, `cmin` must be set as well.
*/Mesh3d & Cmax(const double &cmax ) {
    _mesh3d.insert({"cmax", cmax});
    return *this;
}


/**
Has an effect only if `color` is set to a numerical array. Sets the lower bound of the color domain. Value should be associated to the `color` array index, and if set, `cmax` must be set as well.
*/Mesh3d & Cmin(const double &cmin ) {
    _mesh3d.insert({"cmin", cmin});
    return *this;
}


/**
Sets the color of the whole mesh
*/Mesh3d & Color(const json11::Json::object &color ) {
    _mesh3d.insert({"color", color});
    return *this;
}


Mesh3d & Colorbar(const CppPlotly::Trace::mesh3d::Colorbar &colorbar ) {
    _mesh3d.insert({"colorbar", colorbar});
    return *this;
}


/**
Sets the colorscale and only has an effect if `color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis, Cividis
*/Mesh3d & Colorscale(const json11::Json::object &colorscale ) {
    _mesh3d.insert({"colorscale", colorscale});
    return *this;
}


Mesh3d & Contour(const CppPlotly::Trace::mesh3d::Contour &contour ) {
    _mesh3d.insert({"contour", contour});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Mesh3d & Customdata(const std::vector<double> &customdata ) {
    _mesh3d.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Mesh3d & Customdata(const std::vector<std::string> &customdata ) {
    _mesh3d.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Mesh3d & Customdata(const json11::Json::object &customdata ) {
    _mesh3d.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Mesh3d & Customdatasrc(const std::string &customdatasrc ) {
    _mesh3d.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.
*/Mesh3d & Delaunayaxis(const json11::Json::object &delaunayaxis ) {
    _mesh3d.insert({"delaunayaxis", delaunayaxis});
    return *this;
}


/**
Sets the color of each face Overrides *color* and *vertexcolor*.
*/Mesh3d & Facecolor(const std::vector<double> &facecolor ) {
    _mesh3d.insert({"facecolor", facecolor});
    return *this;
}


/**
Sets the color of each face Overrides *color* and *vertexcolor*.
*/Mesh3d & Facecolor(const std::vector<std::string> &facecolor ) {
    _mesh3d.insert({"facecolor", facecolor});
    return *this;
}


/**
Sets the color of each face Overrides *color* and *vertexcolor*.
*/Mesh3d & Facecolor(const json11::Json::object &facecolor ) {
    _mesh3d.insert({"facecolor", facecolor});
    return *this;
}


/**
Sets the source reference on plot.ly for  facecolor .
*/Mesh3d & Facecolorsrc(const std::string &facecolorsrc ) {
    _mesh3d.insert({"facecolorsrc", facecolorsrc});
    return *this;
}


/**
Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.
*/Mesh3d & Flatshading(const bool &flatshading ) {
    _mesh3d.insert({"flatshading", flatshading});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Mesh3d & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _mesh3d.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Mesh3d & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _mesh3d.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Mesh3d & Hoverlabel(const CppPlotly::Trace::mesh3d::Hoverlabel &hoverlabel ) {
    _mesh3d.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.
*/Mesh3d & I(const std::vector<double> &i ) {
    _mesh3d.insert({"i", i});
    return *this;
}


/**
A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.
*/Mesh3d & I(const std::vector<std::string> &i ) {
    _mesh3d.insert({"i", i});
    return *this;
}


/**
A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.
*/Mesh3d & I(const json11::Json::object &i ) {
    _mesh3d.insert({"i", i});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Mesh3d & Ids(const std::vector<double> &ids ) {
    _mesh3d.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Mesh3d & Ids(const std::vector<std::string> &ids ) {
    _mesh3d.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Mesh3d & Ids(const json11::Json::object &ids ) {
    _mesh3d.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Mesh3d & Idssrc(const std::string &idssrc ) {
    _mesh3d.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the vertex intensity values, used for plotting fields on meshes
*/Mesh3d & Intensity(const std::vector<double> &intensity ) {
    _mesh3d.insert({"intensity", intensity});
    return *this;
}


/**
Sets the vertex intensity values, used for plotting fields on meshes
*/Mesh3d & Intensity(const std::vector<std::string> &intensity ) {
    _mesh3d.insert({"intensity", intensity});
    return *this;
}


/**
Sets the vertex intensity values, used for plotting fields on meshes
*/Mesh3d & Intensity(const json11::Json::object &intensity ) {
    _mesh3d.insert({"intensity", intensity});
    return *this;
}


/**
Sets the source reference on plot.ly for  intensity .
*/Mesh3d & Intensitysrc(const std::string &intensitysrc ) {
    _mesh3d.insert({"intensitysrc", intensitysrc});
    return *this;
}


/**
Sets the source reference on plot.ly for  i .
*/Mesh3d & Isrc(const std::string &isrc ) {
    _mesh3d.insert({"isrc", isrc});
    return *this;
}


/**
A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.
*/Mesh3d & J(const std::vector<double> &j ) {
    _mesh3d.insert({"j", j});
    return *this;
}


/**
A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.
*/Mesh3d & J(const std::vector<std::string> &j ) {
    _mesh3d.insert({"j", j});
    return *this;
}


/**
A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.
*/Mesh3d & J(const json11::Json::object &j ) {
    _mesh3d.insert({"j", j});
    return *this;
}


/**
Sets the source reference on plot.ly for  j .
*/Mesh3d & Jsrc(const std::string &jsrc ) {
    _mesh3d.insert({"jsrc", jsrc});
    return *this;
}


/**
A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.
*/Mesh3d & K(const std::vector<double> &k ) {
    _mesh3d.insert({"k", k});
    return *this;
}


/**
A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.
*/Mesh3d & K(const std::vector<std::string> &k ) {
    _mesh3d.insert({"k", k});
    return *this;
}


/**
A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.
*/Mesh3d & K(const json11::Json::object &k ) {
    _mesh3d.insert({"k", k});
    return *this;
}


/**
Sets the source reference on plot.ly for  k .
*/Mesh3d & Ksrc(const std::string &ksrc ) {
    _mesh3d.insert({"ksrc", ksrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Mesh3d & Legendgroup(const std::string &legendgroup ) {
    _mesh3d.insert({"legendgroup", legendgroup});
    return *this;
}


Mesh3d & Lighting(const CppPlotly::Trace::mesh3d::Lighting &lighting ) {
    _mesh3d.insert({"lighting", lighting});
    return *this;
}


Mesh3d & Lightposition(const CppPlotly::Trace::mesh3d::Lightposition &lightposition ) {
    _mesh3d.insert({"lightposition", lightposition});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Mesh3d & Name(const std::string &name ) {
    _mesh3d.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the surface.
*/Mesh3d & Opacity(const double &opacity ) {
    _mesh3d.insert({"opacity", opacity});
    return *this;
}


/**
Has an effect only if `color` is set to a numerical array. Reverses the color mapping if true (`cmin` will correspond to the last color in the array and `cmax` will correspond to the first color).
*/Mesh3d & Reversescale(const bool &reversescale ) {
    _mesh3d.insert({"reversescale", reversescale});
    return *this;
}


/**
Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
*/Mesh3d & Scene(const json11::Json::object &scene ) {
    _mesh3d.insert({"scene", scene});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Mesh3d & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _mesh3d.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Mesh3d & Showlegend(const bool &showlegend ) {
    _mesh3d.insert({"showlegend", showlegend});
    return *this;
}


/**
Determines whether or not a colorbar is displayed for this trace.
*/Mesh3d & Showscale(const bool &showscale ) {
    _mesh3d.insert({"showscale", showscale});
    return *this;
}


Mesh3d & Stream(const CppPlotly::Trace::mesh3d::Stream &stream ) {
    _mesh3d.insert({"stream", stream});
    return *this;
}


/**
Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
*/Mesh3d & Text(const json11::Json::object &text ) {
    _mesh3d.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Mesh3d & Textsrc(const std::string &textsrc ) {
    _mesh3d.insert({"textsrc", textsrc});
    return *this;
}


Mesh3d & Transforms(const std::vector<CppPlotly::Trace::mesh3d::Transform> &transforms ) {
    _mesh3d.insert({"transforms", transforms});
    return *this;
}


Mesh3d & Uid(const std::string &uid ) {
    _mesh3d.insert({"uid", uid});
    return *this;
}


/**
Sets the color of each vertex Overrides *color*.
*/Mesh3d & Vertexcolor(const std::vector<double> &vertexcolor ) {
    _mesh3d.insert({"vertexcolor", vertexcolor});
    return *this;
}


/**
Sets the color of each vertex Overrides *color*.
*/Mesh3d & Vertexcolor(const std::vector<std::string> &vertexcolor ) {
    _mesh3d.insert({"vertexcolor", vertexcolor});
    return *this;
}


/**
Sets the color of each vertex Overrides *color*.
*/Mesh3d & Vertexcolor(const json11::Json::object &vertexcolor ) {
    _mesh3d.insert({"vertexcolor", vertexcolor});
    return *this;
}


/**
Sets the source reference on plot.ly for  vertexcolor .
*/Mesh3d & Vertexcolorsrc(const std::string &vertexcolorsrc ) {
    _mesh3d.insert({"vertexcolorsrc", vertexcolorsrc});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Mesh3d & Visible(const json11::Json::object &visible ) {
    _mesh3d.insert({"visible", visible});
    return *this;
}


/**
Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
*/Mesh3d & X(const std::vector<double> &x ) {
    _mesh3d.insert({"x", x});
    return *this;
}


/**
Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
*/Mesh3d & X(const std::vector<std::string> &x ) {
    _mesh3d.insert({"x", x});
    return *this;
}


/**
Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
*/Mesh3d & X(const json11::Json::object &x ) {
    _mesh3d.insert({"x", x});
    return *this;
}


/**
Sets the calendar system to use with `x` date data.
*/Mesh3d & Xcalendar(const json11::Json::object &xcalendar ) {
    _mesh3d.insert({"xcalendar", xcalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Mesh3d & Xsrc(const std::string &xsrc ) {
    _mesh3d.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
*/Mesh3d & Y(const std::vector<double> &y ) {
    _mesh3d.insert({"y", y});
    return *this;
}


/**
Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
*/Mesh3d & Y(const std::vector<std::string> &y ) {
    _mesh3d.insert({"y", y});
    return *this;
}


/**
Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
*/Mesh3d & Y(const json11::Json::object &y ) {
    _mesh3d.insert({"y", y});
    return *this;
}


/**
Sets the calendar system to use with `y` date data.
*/Mesh3d & Ycalendar(const json11::Json::object &ycalendar ) {
    _mesh3d.insert({"ycalendar", ycalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Mesh3d & Ysrc(const std::string &ysrc ) {
    _mesh3d.insert({"ysrc", ysrc});
    return *this;
}


/**
Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
*/Mesh3d & Z(const std::vector<double> &z ) {
    _mesh3d.insert({"z", z});
    return *this;
}


/**
Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
*/Mesh3d & Z(const std::vector<std::string> &z ) {
    _mesh3d.insert({"z", z});
    return *this;
}


/**
Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
*/Mesh3d & Z(const json11::Json::object &z ) {
    _mesh3d.insert({"z", z});
    return *this;
}


/**
Sets the calendar system to use with `z` date data.
*/Mesh3d & Zcalendar(const json11::Json::object &zcalendar ) {
    _mesh3d.insert({"zcalendar", zcalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  z .
*/Mesh3d & Zsrc(const std::string &zsrc ) {
    _mesh3d.insert({"zsrc", zsrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _mesh3d;
            }

        private:
            
            json11::Json::object _mesh3d;

        };
    }
}


