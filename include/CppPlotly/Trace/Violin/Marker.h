/**
 * @file Marker.h
This attribute is part of the possible options for the trace violin.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#violin>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "CppPlotly/Trace/Violin/Marker/Line.h"



namespace CppPlotly {
    namespace Trace {
    namespace violin {

    /**
     * 
     *
     *
     */
    class Marker {
    public:

    /**
Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `cmin` and `cmax` if set.
*/Marker & Color(const json11::Json::object &color ) {
    _marker.insert({"color", color});
    return *this;
}


Marker & Line(const CppPlotly::Trace::violin::marker::Line &line ) {
    _marker.insert({"line", line});
    return *this;
}


/**
Sets the marker opacity.
*/Marker & Opacity(const double &opacity ) {
    _marker.insert({"opacity", opacity});
    return *this;
}


/**
Sets the color of the outlier sample points.
*/Marker & Outliercolor(const json11::Json::object &outliercolor ) {
    _marker.insert({"outliercolor", outliercolor});
    return *this;
}


/**
Sets the marker size (in px).
*/Marker & Size(const double &size ) {
    _marker.insert({"size", size});
    return *this;
}


/**
Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
*/Marker & Symbol(const json11::Json::object &symbol ) {
    _marker.insert({"symbol", symbol});
    return *this;
}




    json11::Json to_json() const {
        return _marker;
    }

    private:

    json11::Json::object _marker;

    };

    }

    }
}
