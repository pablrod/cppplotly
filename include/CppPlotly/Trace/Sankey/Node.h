/**
 * @file Node.h
This attribute is part of the possible options for the trace sankey.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#sankey>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "CppPlotly/Trace/Sankey/Node/Hoverlabel.h"
#include "CppPlotly/Trace/Sankey/Node/Line.h"



namespace CppPlotly {
    namespace Trace {
    namespace sankey {

    /**
     * 
     *
     *
     */
    class Node {
    public:

    /**
Sets the `node` color. It can be a single value, or an array for specifying color for each `node`. If `node.color` is omitted, then the default `Plotly` color palette will be cycled through to have a variety of colors. These defaults are not fully opaque, to allow some visibility of what is beneath the node.
*/Node & Color(const json11::Json &color ) {
    _node.insert({"color", color});
    return *this;
}


/**
Sets the source reference on plot.ly for  color .
*/Node & Colorsrc(const std::string &colorsrc ) {
    _node.insert({"colorsrc", colorsrc});
    return *this;
}


Node & Description(const json11::Json &description ) {
    _node.insert({"description", description});
    return *this;
}


/**
Groups of nodes. Each group is defined by an array with the indices of the nodes it contains. Multiple groups can be specified.
*/Node & Groups(const std::vector<std::string> &groups ) {
    _node.insert({"groups", groups});
    return *this;
}


/**
Determines which trace information appear when hovering nodes. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Node & Hoverinfo(const json11::Json &hoverinfo ) {
    _node.insert({"hoverinfo", hoverinfo});
    return *this;
}


Node & Hoverlabel(const CppPlotly::Trace::sankey::node::Hoverlabel &hoverlabel ) {
    _node.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". See https://github.com/d3/d3-format/blob/master/README.md#locale_format for details on the formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plot.ly/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
*/Node & Hovertemplate(const json11::Json &hovertemplate ) {
    _node.insert({"hovertemplate", hovertemplate});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertemplate .
*/Node & Hovertemplatesrc(const std::string &hovertemplatesrc ) {
    _node.insert({"hovertemplatesrc", hovertemplatesrc});
    return *this;
}


/**
The shown name of the node.
*/Node & Label(const std::vector<double> &label ) {
    _node.insert({"label", label});
    return *this;
}


/**
The shown name of the node.
*/Node & Label(const std::vector<std::string> &label ) {
    _node.insert({"label", label});
    return *this;
}


/**
The shown name of the node.
*/Node & Label(const json11::Json &label ) {
    _node.insert({"label", label});
    return *this;
}


/**
Sets the source reference on plot.ly for  label .
*/Node & Labelsrc(const std::string &labelsrc ) {
    _node.insert({"labelsrc", labelsrc});
    return *this;
}


Node & Line(const CppPlotly::Trace::sankey::node::Line &line ) {
    _node.insert({"line", line});
    return *this;
}


/**
Sets the padding (in px) between the `nodes`.
*/Node & Pad(const double &pad ) {
    _node.insert({"pad", pad});
    return *this;
}


/**
Sets the thickness (in px) of the `nodes`.
*/Node & Thickness(const double &thickness ) {
    _node.insert({"thickness", thickness});
    return *this;
}




    json11::Json to_json() const {
        return _node;
    }

    private:

    json11::Json::object _node;

    };

    }

    }
}
