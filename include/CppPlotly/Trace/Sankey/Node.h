/**
 * @file Node.h
This attribute is part of the possible options for the trace sankey.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#sankey>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "CppPlotly/Trace/Sankey/Node/Line.h"



namespace CppPlotly {
    namespace Trace {
    namespace sankey {

    /**
     * 
     *
     *
     */
    class Node {
    public:

    /**
Sets the `node` color. It can be a single value, or an array for specifying color for each `node`. If `node.color` is omitted, then the default `Plotly` color palette will be cycled through to have a variety of colors. These defaults are not fully opaque, to allow some visibility of what is beneath the node.
*/Node & Color(const json11::Json::object &color ) {
    _node.insert({"color", color});
    return *this;
}


/**
Sets the source reference on plot.ly for  color .
*/Node & Colorsrc(const std::string &colorsrc ) {
    _node.insert({"colorsrc", colorsrc});
    return *this;
}


Node & Description(const json11::Json::object &description ) {
    _node.insert({"description", description});
    return *this;
}


/**
The shown name of the node.
*/Node & Label(const std::vector<double> &label ) {
    _node.insert({"label", label});
    return *this;
}


/**
The shown name of the node.
*/Node & Label(const std::vector<std::string> &label ) {
    _node.insert({"label", label});
    return *this;
}


/**
The shown name of the node.
*/Node & Label(const json11::Json::object &label ) {
    _node.insert({"label", label});
    return *this;
}


/**
Sets the source reference on plot.ly for  label .
*/Node & Labelsrc(const std::string &labelsrc ) {
    _node.insert({"labelsrc", labelsrc});
    return *this;
}


Node & Line(const CppPlotly::Trace::sankey::node::Line &line ) {
    _node.insert({"line", line});
    return *this;
}


/**
Sets the padding (in px) between the `nodes`.
*/Node & Pad(const double &pad ) {
    _node.insert({"pad", pad});
    return *this;
}


/**
Sets the thickness (in px) of the `nodes`.
*/Node & Thickness(const double &thickness ) {
    _node.insert({"thickness", thickness});
    return *this;
}




    json11::Json to_json() const {
        return _node;
    }

    private:

    json11::Json::object _node;

    };

    }

    }
}
