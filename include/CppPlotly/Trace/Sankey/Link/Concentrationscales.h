/**
 * @file Concentrationscales.h
This attribute is part of the possible options for the trace sankey.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#sankey>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>




namespace CppPlotly {
    namespace Trace {
    namespace sankey {
namespace link {

    /**
     * 
     *
     *
     */
    class Concentrationscales {
    public:

    /**
Sets the upper bound of the color domain.
*/Concentrationscales & Cmax(const double &cmax ) {
    _concentrationscales.insert({"cmax", cmax});
    return *this;
}


/**
Sets the lower bound of the color domain.
*/Concentrationscales & Cmin(const double &cmin ) {
    _concentrationscales.insert({"cmin", cmin});
    return *this;
}


/**
Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
*/Concentrationscales & Colorscale(const json11::Json &colorscale ) {
    _concentrationscales.insert({"colorscale", colorscale});
    return *this;
}


/**
The label of the links to color based on their concentration within a flow.
*/Concentrationscales & Label(const std::string &label ) {
    _concentrationscales.insert({"label", label});
    return *this;
}


/**
When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
*/Concentrationscales & Name(const std::string &name ) {
    _concentrationscales.insert({"name", name});
    return *this;
}


/**
Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
*/Concentrationscales & Templateitemname(const std::string &templateitemname ) {
    _concentrationscales.insert({"templateitemname", templateitemname});
    return *this;
}




    json11::Json to_json() const {
        return _concentrationscales;
    }

    private:

    json11::Json::object _concentrationscales;

    };

    }
}

    }
}
