/**
 * @file Ohlc.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#ohlc>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Ohlc/Decreasing.h"
#include "CppPlotly/Trace/Ohlc/Hoverlabel.h"
#include "CppPlotly/Trace/Ohlc/Increasing.h"
#include "CppPlotly/Trace/Ohlc/Line.h"
#include "CppPlotly/Trace/Ohlc/Stream.h"
#include "CppPlotly/Trace/Ohlc/Transform.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The tip of the lines represent the `low` and `high` values and the horizontal segments represent the `open` and `close` values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red.
         *
         *
         */ 
        class Ohlc : public virtual CppPlotly::BaseTrace {
        public:
            Ohlc() :
                            _ohlc({
                                {"type", "ohlc"},
                                    })
                        {}

           /**
Sets the close values.
*/Ohlc & Close(const std::vector<double> &close ) {
    _ohlc.insert({"close", close});
    return *this;
}


/**
Sets the source reference on plot.ly for  close .
*/Ohlc & Closesrc(const std::string &closesrc ) {
    _ohlc.insert({"closesrc", closesrc});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Ohlc & Customdata(const std::vector<double> &customdata ) {
    _ohlc.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Ohlc & Customdatasrc(const std::string &customdatasrc ) {
    _ohlc.insert({"customdatasrc", customdatasrc});
    return *this;
}


Ohlc & Decreasing(const CppPlotly::Trace::ohlc::Decreasing &decreasing ) {
    _ohlc.insert({"decreasing", decreasing});
    return *this;
}


/**
Sets the high values.
*/Ohlc & High(const std::vector<double> &high ) {
    _ohlc.insert({"high", high});
    return *this;
}


/**
Sets the source reference on plot.ly for  high .
*/Ohlc & Highsrc(const std::string &highsrc ) {
    _ohlc.insert({"highsrc", highsrc});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Ohlc & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _ohlc.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Ohlc & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _ohlc.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Ohlc & Hoverlabel(const CppPlotly::Trace::ohlc::Hoverlabel &hoverlabel ) {
    _ohlc.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Ohlc & Ids(const std::vector<double> &ids ) {
    _ohlc.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Ohlc & Idssrc(const std::string &idssrc ) {
    _ohlc.insert({"idssrc", idssrc});
    return *this;
}


Ohlc & Increasing(const CppPlotly::Trace::ohlc::Increasing &increasing ) {
    _ohlc.insert({"increasing", increasing});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Ohlc & Legendgroup(const std::string &legendgroup ) {
    _ohlc.insert({"legendgroup", legendgroup});
    return *this;
}


Ohlc & Line(const CppPlotly::Trace::ohlc::Line &line ) {
    _ohlc.insert({"line", line});
    return *this;
}


/**
Sets the low values.
*/Ohlc & Low(const std::vector<double> &low ) {
    _ohlc.insert({"low", low});
    return *this;
}


/**
Sets the source reference on plot.ly for  low .
*/Ohlc & Lowsrc(const std::string &lowsrc ) {
    _ohlc.insert({"lowsrc", lowsrc});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Ohlc & Name(const std::string &name ) {
    _ohlc.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the trace.
*/Ohlc & Opacity(const double &opacity ) {
    _ohlc.insert({"opacity", opacity});
    return *this;
}


/**
Sets the open values.
*/Ohlc & Open(const std::vector<double> &open ) {
    _ohlc.insert({"open", open});
    return *this;
}


/**
Sets the source reference on plot.ly for  open .
*/Ohlc & Opensrc(const std::string &opensrc ) {
    _ohlc.insert({"opensrc", opensrc});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Ohlc & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _ohlc.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Ohlc & Showlegend(const bool &showlegend ) {
    _ohlc.insert({"showlegend", showlegend});
    return *this;
}


Ohlc & Stream(const CppPlotly::Trace::ohlc::Stream &stream ) {
    _ohlc.insert({"stream", stream});
    return *this;
}


/**
Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.
*/Ohlc & Text(const json11::Json::object &text ) {
    _ohlc.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Ohlc & Textsrc(const std::string &textsrc ) {
    _ohlc.insert({"textsrc", textsrc});
    return *this;
}


/**
Sets the width of the open/close tick marks relative to the *x* minimal interval.
*/Ohlc & Tickwidth(const double &tickwidth ) {
    _ohlc.insert({"tickwidth", tickwidth});
    return *this;
}


Ohlc & Transforms(const std::vector<CppPlotly::Trace::ohlc::Transform> &transforms ) {
    _ohlc.insert({"transforms", transforms});
    return *this;
}


Ohlc & Uid(const std::string &uid ) {
    _ohlc.insert({"uid", uid});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Ohlc & Visible(const json11::Json::object &visible ) {
    _ohlc.insert({"visible", visible});
    return *this;
}


/**
Sets the x coordinates. If absent, linear coordinate will be generated.
*/Ohlc & X(const std::vector<double> &x ) {
    _ohlc.insert({"x", x});
    return *this;
}


/**
Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
*/Ohlc & Xaxis(const json11::Json::object &xaxis ) {
    _ohlc.insert({"xaxis", xaxis});
    return *this;
}


/**
Sets the calendar system to use with `x` date data.
*/Ohlc & Xcalendar(const json11::Json::object &xcalendar ) {
    _ohlc.insert({"xcalendar", xcalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Ohlc & Xsrc(const std::string &xsrc ) {
    _ohlc.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
*/Ohlc & Yaxis(const json11::Json::object &yaxis ) {
    _ohlc.insert({"yaxis", yaxis});
    return *this;
}


 

            json11::Json to_json() const {
                return _ohlc;
            }

        private:
            
            json11::Json::object _ohlc;

        };
    }
}


