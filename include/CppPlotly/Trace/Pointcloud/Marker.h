/**
 * @file Marker.h
This attribute is part of the possible options for the trace pointcloud.

This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#pointcloud>

DISCLAIMER

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.

*/

#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "CppPlotly/Trace/Pointcloud/Marker/Border.h"



namespace CppPlotly {
    namespace Trace {
    namespace pointcloud {

    /**
     * 
     *
     *
     */
    class Marker {
    public:

    /**
Determines if colors are blended together for a translucency effect in case `opacity` is specified as a value less then `1`. Setting `blend` to `true` reduces zoom/pan speed if used with large numbers of points.
*/Marker & Blend(const bool &blend ) {
    _marker.insert({"blend", blend});
    return *this;
}


Marker & Border(const CppPlotly::Trace::pointcloud::marker::Border &border ) {
    _marker.insert({"border", border});
    return *this;
}


/**
Sets the marker fill color. It accepts a specific color.If the color is not fully opaque and there are hundreds of thousandsof points, it may cause slower zooming and panning.
*/Marker & Color(const json11::Json::object &color ) {
    _marker.insert({"color", color});
    return *this;
}


/**
Sets the marker opacity. The default value is `1` (fully opaque). If the markers are not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning. Opacity fades the color even if `blend` is left on `false` even if there is no translucency effect in that case.
*/Marker & Opacity(const double &opacity ) {
    _marker.insert({"opacity", opacity});
    return *this;
}


/**
Sets the maximum size (in px) of the rendered marker points. Effective when the `pointcloud` shows only few points.
*/Marker & Sizemax(const double &sizemax ) {
    _marker.insert({"sizemax", sizemax});
    return *this;
}


/**
Sets the minimum size (in px) of the rendered marker points, effective when the `pointcloud` shows a million or more points.
*/Marker & Sizemin(const double &sizemin ) {
    _marker.insert({"sizemin", sizemin});
    return *this;
}




    json11::Json to_json() const {
        return _marker;
    }

    private:

    json11::Json::object _marker;

    };

    }

    }
}
