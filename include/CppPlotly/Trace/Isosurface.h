/**
 * @file Isosurface.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#isosurface>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Isosurface/Caps.h"
#include "CppPlotly/Trace/Isosurface/Colorbar.h"
#include "CppPlotly/Trace/Isosurface/Contour.h"
#include "CppPlotly/Trace/Isosurface/Hoverlabel.h"
#include "CppPlotly/Trace/Isosurface/Lighting.h"
#include "CppPlotly/Trace/Isosurface/Lightposition.h"
#include "CppPlotly/Trace/Isosurface/Slices.h"
#include "CppPlotly/Trace/Isosurface/Spaceframe.h"
#include "CppPlotly/Trace/Isosurface/Stream.h"
#include "CppPlotly/Trace/Isosurface/Surface.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * Draws isosurfaces between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the `value`, `x`, `y` and `z` of every vertex of a uniform or non-uniform 3-D grid. Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace.
         *
         *
         */ 
        class Isosurface : public virtual CppPlotly::BaseTrace {
        public:
            Isosurface() :
                            _isosurface({
                                {"type", "isosurface"},
                                    })
                        {}

           /**
Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
*/Isosurface & Autocolorscale(const bool &autocolorscale ) {
    _isosurface.insert({"autocolorscale", autocolorscale});
    return *this;
}


Isosurface & Caps(const CppPlotly::Trace::isosurface::Caps &caps ) {
    _isosurface.insert({"caps", caps});
    return *this;
}


/**
Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.
*/Isosurface & Cauto(const bool &cauto ) {
    _isosurface.insert({"cauto", cauto});
    return *this;
}


/**
Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.
*/Isosurface & Cmax(const double &cmax ) {
    _isosurface.insert({"cmax", cmax});
    return *this;
}


/**
Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.
*/Isosurface & Cmid(const double &cmid ) {
    _isosurface.insert({"cmid", cmid});
    return *this;
}


/**
Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.
*/Isosurface & Cmin(const double &cmin ) {
    _isosurface.insert({"cmin", cmin});
    return *this;
}


Isosurface & Colorbar(const CppPlotly::Trace::isosurface::Colorbar &colorbar ) {
    _isosurface.insert({"colorbar", colorbar});
    return *this;
}


/**
Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
*/Isosurface & Colorscale(const json11::Json &colorscale ) {
    _isosurface.insert({"colorscale", colorscale});
    return *this;
}


Isosurface & Contour(const CppPlotly::Trace::isosurface::Contour &contour ) {
    _isosurface.insert({"contour", contour});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Isosurface & Customdata(const std::vector<double> &customdata ) {
    _isosurface.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Isosurface & Customdata(const std::vector<std::string> &customdata ) {
    _isosurface.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Isosurface & Customdata(const json11::Json &customdata ) {
    _isosurface.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Isosurface & Customdatasrc(const std::string &customdatasrc ) {
    _isosurface.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.
*/Isosurface & Flatshading(const bool &flatshading ) {
    _isosurface.insert({"flatshading", flatshading});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Isosurface & Hoverinfo(const json11::Json &hoverinfo ) {
    _isosurface.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Isosurface & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _isosurface.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Isosurface & Hoverlabel(const CppPlotly::Trace::isosurface::Hoverlabel &hoverlabel ) {
    _isosurface.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". See https://github.com/d3/d3-format/blob/master/README.md#locale_format for details on the formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plot.ly/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
*/Isosurface & Hovertemplate(const json11::Json &hovertemplate ) {
    _isosurface.insert({"hovertemplate", hovertemplate});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertemplate .
*/Isosurface & Hovertemplatesrc(const std::string &hovertemplatesrc ) {
    _isosurface.insert({"hovertemplatesrc", hovertemplatesrc});
    return *this;
}


/**
Same as `text`.
*/Isosurface & Hovertext(const json11::Json &hovertext ) {
    _isosurface.insert({"hovertext", hovertext});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertext .
*/Isosurface & Hovertextsrc(const std::string &hovertextsrc ) {
    _isosurface.insert({"hovertextsrc", hovertextsrc});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Isosurface & Ids(const std::vector<double> &ids ) {
    _isosurface.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Isosurface & Ids(const std::vector<std::string> &ids ) {
    _isosurface.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Isosurface & Ids(const json11::Json &ids ) {
    _isosurface.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Isosurface & Idssrc(const std::string &idssrc ) {
    _isosurface.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the maximum boundary for iso-surface plot.
*/Isosurface & Isomax(const double &isomax ) {
    _isosurface.insert({"isomax", isomax});
    return *this;
}


/**
Sets the minimum boundary for iso-surface plot.
*/Isosurface & Isomin(const double &isomin ) {
    _isosurface.insert({"isomin", isomin});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Isosurface & Legendgroup(const std::string &legendgroup ) {
    _isosurface.insert({"legendgroup", legendgroup});
    return *this;
}


Isosurface & Lighting(const CppPlotly::Trace::isosurface::Lighting &lighting ) {
    _isosurface.insert({"lighting", lighting});
    return *this;
}


Isosurface & Lightposition(const CppPlotly::Trace::isosurface::Lightposition &lightposition ) {
    _isosurface.insert({"lightposition", lightposition});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Isosurface & Name(const std::string &name ) {
    _isosurface.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.
*/Isosurface & Opacity(const double &opacity ) {
    _isosurface.insert({"opacity", opacity});
    return *this;
}


/**
Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
*/Isosurface & Reversescale(const bool &reversescale ) {
    _isosurface.insert({"reversescale", reversescale});
    return *this;
}


/**
Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
*/Isosurface & Scene(const json11::Json &scene ) {
    _isosurface.insert({"scene", scene});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Isosurface & Selectedpoints(const json11::Json &selectedpoints ) {
    _isosurface.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Isosurface & Showlegend(const bool &showlegend ) {
    _isosurface.insert({"showlegend", showlegend});
    return *this;
}


/**
Determines whether or not a colorbar is displayed for this trace.
*/Isosurface & Showscale(const bool &showscale ) {
    _isosurface.insert({"showscale", showscale});
    return *this;
}


Isosurface & Slices(const CppPlotly::Trace::isosurface::Slices &slices ) {
    _isosurface.insert({"slices", slices});
    return *this;
}


Isosurface & Spaceframe(const CppPlotly::Trace::isosurface::Spaceframe &spaceframe ) {
    _isosurface.insert({"spaceframe", spaceframe});
    return *this;
}


Isosurface & Stream(const CppPlotly::Trace::isosurface::Stream &stream ) {
    _isosurface.insert({"stream", stream});
    return *this;
}


Isosurface & Surface(const CppPlotly::Trace::isosurface::Surface &surface ) {
    _isosurface.insert({"surface", surface});
    return *this;
}


/**
Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
*/Isosurface & Text(const json11::Json &text ) {
    _isosurface.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Isosurface & Textsrc(const std::string &textsrc ) {
    _isosurface.insert({"textsrc", textsrc});
    return *this;
}


/**
Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
*/Isosurface & Uid(const std::string &uid ) {
    _isosurface.insert({"uid", uid});
    return *this;
}


/**
Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
*/Isosurface & Uirevision(const json11::Json &uirevision ) {
    _isosurface.insert({"uirevision", uirevision});
    return *this;
}


/**
Sets the 4th dimension (value) of the vertices.
*/Isosurface & Value(const std::vector<double> &value ) {
    _isosurface.insert({"value", value});
    return *this;
}


/**
Sets the 4th dimension (value) of the vertices.
*/Isosurface & Value(const std::vector<std::string> &value ) {
    _isosurface.insert({"value", value});
    return *this;
}


/**
Sets the 4th dimension (value) of the vertices.
*/Isosurface & Value(const json11::Json &value ) {
    _isosurface.insert({"value", value});
    return *this;
}


/**
Sets the source reference on plot.ly for  value .
*/Isosurface & Valuesrc(const std::string &valuesrc ) {
    _isosurface.insert({"valuesrc", valuesrc});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Isosurface & Visible(const json11::Json &visible ) {
    _isosurface.insert({"visible", visible});
    return *this;
}


/**
Sets the X coordinates of the vertices on X axis.
*/Isosurface & X(const std::vector<double> &x ) {
    _isosurface.insert({"x", x});
    return *this;
}


/**
Sets the X coordinates of the vertices on X axis.
*/Isosurface & X(const std::vector<std::string> &x ) {
    _isosurface.insert({"x", x});
    return *this;
}


/**
Sets the X coordinates of the vertices on X axis.
*/Isosurface & X(const json11::Json &x ) {
    _isosurface.insert({"x", x});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Isosurface & Xsrc(const std::string &xsrc ) {
    _isosurface.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets the Y coordinates of the vertices on Y axis.
*/Isosurface & Y(const std::vector<double> &y ) {
    _isosurface.insert({"y", y});
    return *this;
}


/**
Sets the Y coordinates of the vertices on Y axis.
*/Isosurface & Y(const std::vector<std::string> &y ) {
    _isosurface.insert({"y", y});
    return *this;
}


/**
Sets the Y coordinates of the vertices on Y axis.
*/Isosurface & Y(const json11::Json &y ) {
    _isosurface.insert({"y", y});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Isosurface & Ysrc(const std::string &ysrc ) {
    _isosurface.insert({"ysrc", ysrc});
    return *this;
}


/**
Sets the Z coordinates of the vertices on Z axis.
*/Isosurface & Z(const std::vector<double> &z ) {
    _isosurface.insert({"z", z});
    return *this;
}


/**
Sets the Z coordinates of the vertices on Z axis.
*/Isosurface & Z(const std::vector<std::string> &z ) {
    _isosurface.insert({"z", z});
    return *this;
}


/**
Sets the Z coordinates of the vertices on Z axis.
*/Isosurface & Z(const json11::Json &z ) {
    _isosurface.insert({"z", z});
    return *this;
}


/**
Sets the source reference on plot.ly for  z .
*/Isosurface & Zsrc(const std::string &zsrc ) {
    _isosurface.insert({"zsrc", zsrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _isosurface;
            }

        private:
            
            json11::Json::object _isosurface;

        };
    }
}


