/**
 * @file Box.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#box>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Box/Hoverlabel.h"
#include "CppPlotly/Trace/Box/Line.h"
#include "CppPlotly/Trace/Box/Marker.h"
#include "CppPlotly/Trace/Box/Selected.h"
#include "CppPlotly/Trace/Box/Stream.h"
#include "CppPlotly/Trace/Box/Transform.h"
#include "CppPlotly/Trace/Box/Unselected.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * In vertical (horizontal) box plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one box per distinct x (y) value is drawn If no `x` (`y`) {array} is provided, a single box is drawn. That box position is then positioned with with `name` or with `x0` (`y0`) if provided. Each box spans from quartile 1 (Q1) to quartile 3 (Q3). The second quartile (Q2) is marked by a line inside the box. By default, the whiskers correspond to the box' edges +/- 1.5 times the interquartile range (IQR = Q3-Q1), see *boxpoints* for other options.
         *
         *
         */ 
        class Box : public virtual CppPlotly::BaseTrace {
        public:
            Box() :
                            _box({
                                {"type", "box"},
                                    })
                        {}

           /**
Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.
*/Box & Alignmentgroup(const std::string &alignmentgroup ) {
    _box.insert({"alignmentgroup", alignmentgroup});
    return *this;
}


/**
If *true*, the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If *sd* the standard deviation is also drawn.
*/Box & Boxmean(const json11::Json &boxmean ) {
    _box.insert({"boxmean", boxmean});
    return *this;
}


/**
If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the box(es) are shown with no sample points
*/Box & Boxpoints(const json11::Json &boxpoints ) {
    _box.insert({"boxpoints", boxpoints});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Box & Customdata(const std::vector<double> &customdata ) {
    _box.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Box & Customdata(const std::vector<std::string> &customdata ) {
    _box.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Box & Customdata(const json11::Json &customdata ) {
    _box.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Box & Customdatasrc(const std::string &customdatasrc ) {
    _box.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
*/Box & Fillcolor(const json11::Json &fillcolor ) {
    _box.insert({"fillcolor", fillcolor});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Box & Hoverinfo(const json11::Json &hoverinfo ) {
    _box.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Box & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _box.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Box & Hoverlabel(const CppPlotly::Trace::box::Hoverlabel &hoverlabel ) {
    _box.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Do the hover effects highlight individual boxes  or sample points or both?
*/Box & Hoveron(const json11::Json &hoveron ) {
    _box.insert({"hoveron", hoveron});
    return *this;
}


/**
Same as `text`.
*/Box & Hovertext(const json11::Json &hovertext ) {
    _box.insert({"hovertext", hovertext});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertext .
*/Box & Hovertextsrc(const std::string &hovertextsrc ) {
    _box.insert({"hovertextsrc", hovertextsrc});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Box & Ids(const std::vector<double> &ids ) {
    _box.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Box & Ids(const std::vector<std::string> &ids ) {
    _box.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Box & Ids(const json11::Json &ids ) {
    _box.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Box & Idssrc(const std::string &idssrc ) {
    _box.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the box(es).
*/Box & Jitter(const double &jitter ) {
    _box.insert({"jitter", jitter});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Box & Legendgroup(const std::string &legendgroup ) {
    _box.insert({"legendgroup", legendgroup});
    return *this;
}


Box & Line(const CppPlotly::Trace::box::Line &line ) {
    _box.insert({"line", line});
    return *this;
}


Box & Marker(const CppPlotly::Trace::box::Marker &marker ) {
    _box.insert({"marker", marker});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical
*/Box & Name(const std::string &name ) {
    _box.insert({"name", name});
    return *this;
}


/**
Determines whether or not notches should be drawn.
*/Box & Notched(const bool &notched ) {
    _box.insert({"notched", notched});
    return *this;
}


/**
Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).
*/Box & Notchwidth(const double &notchwidth ) {
    _box.insert({"notchwidth", notchwidth});
    return *this;
}


/**
Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.
*/Box & Offsetgroup(const std::string &offsetgroup ) {
    _box.insert({"offsetgroup", offsetgroup});
    return *this;
}


/**
Sets the opacity of the trace.
*/Box & Opacity(const double &opacity ) {
    _box.insert({"opacity", opacity});
    return *this;
}


/**
Sets the orientation of the box(es). If *v* (*h*), the distribution is visualized along the vertical (horizontal).
*/Box & Orientation(const json11::Json &orientation ) {
    _box.insert({"orientation", orientation});
    return *this;
}


/**
Sets the position of the sample points in relation to the box(es). If *0*, the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes
*/Box & Pointpos(const double &pointpos ) {
    _box.insert({"pointpos", pointpos});
    return *this;
}


Box & Selected(const CppPlotly::Trace::box::Selected &selected ) {
    _box.insert({"selected", selected});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Box & Selectedpoints(const json11::Json &selectedpoints ) {
    _box.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Box & Showlegend(const bool &showlegend ) {
    _box.insert({"showlegend", showlegend});
    return *this;
}


Box & Stream(const CppPlotly::Trace::box::Stream &stream ) {
    _box.insert({"stream", stream});
    return *this;
}


/**
Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
*/Box & Text(const json11::Json &text ) {
    _box.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Box & Textsrc(const std::string &textsrc ) {
    _box.insert({"textsrc", textsrc});
    return *this;
}


Box & Transforms(const std::vector<CppPlotly::Trace::box::Transform> &transforms ) {
    _box.insert({"transforms", transforms});
    return *this;
}


/**
Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
*/Box & Uid(const std::string &uid ) {
    _box.insert({"uid", uid});
    return *this;
}


/**
Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
*/Box & Uirevision(const json11::Json &uirevision ) {
    _box.insert({"uirevision", uirevision});
    return *this;
}


Box & Unselected(const CppPlotly::Trace::box::Unselected &unselected ) {
    _box.insert({"unselected", unselected});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Box & Visible(const json11::Json &visible ) {
    _box.insert({"visible", visible});
    return *this;
}


/**
Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).
*/Box & Whiskerwidth(const double &whiskerwidth ) {
    _box.insert({"whiskerwidth", whiskerwidth});
    return *this;
}


/**
Sets the width of the box in data coordinate If *0* (default value) the width is automatically selected based on the positions of other box traces in the same subplot.
*/Box & Width(const double &width ) {
    _box.insert({"width", width});
    return *this;
}


/**
Sets the x sample data or coordinates. See overview for more info.
*/Box & X(const std::vector<double> &x ) {
    _box.insert({"x", x});
    return *this;
}


/**
Sets the x sample data or coordinates. See overview for more info.
*/Box & X(const std::vector<std::string> &x ) {
    _box.insert({"x", x});
    return *this;
}


/**
Sets the x sample data or coordinates. See overview for more info.
*/Box & X(const json11::Json &x ) {
    _box.insert({"x", x});
    return *this;
}


/**
Sets the x coordinate of the box. See overview for more info.
*/Box & X0(const json11::Json &x0 ) {
    _box.insert({"x0", x0});
    return *this;
}


/**
Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
*/Box & Xaxis(const json11::Json &xaxis ) {
    _box.insert({"xaxis", xaxis});
    return *this;
}


/**
Sets the calendar system to use with `x` date data.
*/Box & Xcalendar(const json11::Json &xcalendar ) {
    _box.insert({"xcalendar", xcalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Box & Xsrc(const std::string &xsrc ) {
    _box.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets the y sample data or coordinates. See overview for more info.
*/Box & Y(const std::vector<double> &y ) {
    _box.insert({"y", y});
    return *this;
}


/**
Sets the y sample data or coordinates. See overview for more info.
*/Box & Y(const std::vector<std::string> &y ) {
    _box.insert({"y", y});
    return *this;
}


/**
Sets the y sample data or coordinates. See overview for more info.
*/Box & Y(const json11::Json &y ) {
    _box.insert({"y", y});
    return *this;
}


/**
Sets the y coordinate of the box. See overview for more info.
*/Box & Y0(const json11::Json &y0 ) {
    _box.insert({"y0", y0});
    return *this;
}


/**
Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
*/Box & Yaxis(const json11::Json &yaxis ) {
    _box.insert({"yaxis", yaxis});
    return *this;
}


/**
Sets the calendar system to use with `y` date data.
*/Box & Ycalendar(const json11::Json &ycalendar ) {
    _box.insert({"ycalendar", ycalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Box & Ysrc(const std::string &ysrc ) {
    _box.insert({"ysrc", ysrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _box;
            }

        private:
            
            json11::Json::object _box;

        };
    }
}


