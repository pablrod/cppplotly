/**
 * @file Splom.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#splom>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Splom/Diagonal.h"
#include "CppPlotly/Trace/Splom/Dimension.h"
#include "CppPlotly/Trace/Splom/Hoverlabel.h"
#include "CppPlotly/Trace/Splom/Marker.h"
#include "CppPlotly/Trace/Splom/Selected.h"
#include "CppPlotly/Trace/Splom/Stream.h"
#include "CppPlotly/Trace/Splom/Transform.h"
#include "CppPlotly/Trace/Splom/Unselected.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * Splom traces generate scatter plot matrix visualizations. Each splom `dimensions` items correspond to a generated axis. Values for each of those dimensions are set in `dimensions[i].values`. Splom traces support all `scattergl` marker style attributes. Specify `layout.grid` attributes and/or layout x-axis and y-axis attributes for more control over the axis positioning and style. 
         *
         *
         */ 
        class Splom : public virtual CppPlotly::BaseTrace {
        public:
            Splom() :
                            _splom({
                                {"type", "splom"},
                                    })
                        {}

           /**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Splom & Customdata(const std::vector<double> &customdata ) {
    _splom.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Splom & Customdatasrc(const std::string &customdatasrc ) {
    _splom.insert({"customdatasrc", customdatasrc});
    return *this;
}


Splom & Diagonal(const CppPlotly::Trace::splom::Diagonal &diagonal ) {
    _splom.insert({"diagonal", diagonal});
    return *this;
}


Splom & Dimensions(const std::vector<CppPlotly::Trace::splom::Dimension> &dimensions ) {
    _splom.insert({"dimensions", dimensions});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Splom & Hoverinfo(const json11::Json::object &hoverinfo ) {
    _splom.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Splom & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _splom.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Splom & Hoverlabel(const CppPlotly::Trace::splom::Hoverlabel &hoverlabel ) {
    _splom.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Splom & Ids(const std::vector<double> &ids ) {
    _splom.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Splom & Idssrc(const std::string &idssrc ) {
    _splom.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Splom & Legendgroup(const std::string &legendgroup ) {
    _splom.insert({"legendgroup", legendgroup});
    return *this;
}


Splom & Marker(const CppPlotly::Trace::splom::Marker &marker ) {
    _splom.insert({"marker", marker});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Splom & Name(const std::string &name ) {
    _splom.insert({"name", name});
    return *this;
}


/**
Sets the opacity of the trace.
*/Splom & Opacity(const double &opacity ) {
    _splom.insert({"opacity", opacity});
    return *this;
}


Splom & Selected(const CppPlotly::Trace::splom::Selected &selected ) {
    _splom.insert({"selected", selected});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Splom & Selectedpoints(const json11::Json::object &selectedpoints ) {
    _splom.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Splom & Showlegend(const bool &showlegend ) {
    _splom.insert({"showlegend", showlegend});
    return *this;
}


/**
Determines whether or not subplots on the lower half from the diagonal are displayed.
*/Splom & Showlowerhalf(const bool &showlowerhalf ) {
    _splom.insert({"showlowerhalf", showlowerhalf});
    return *this;
}


/**
Determines whether or not subplots on the upper half from the diagonal are displayed.
*/Splom & Showupperhalf(const bool &showupperhalf ) {
    _splom.insert({"showupperhalf", showupperhalf});
    return *this;
}


Splom & Stream(const CppPlotly::Trace::splom::Stream &stream ) {
    _splom.insert({"stream", stream});
    return *this;
}


/**
Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.
*/Splom & Text(const json11::Json::object &text ) {
    _splom.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Splom & Textsrc(const std::string &textsrc ) {
    _splom.insert({"textsrc", textsrc});
    return *this;
}


Splom & Transforms(const std::vector<CppPlotly::Trace::splom::Transform> &transforms ) {
    _splom.insert({"transforms", transforms});
    return *this;
}


Splom & Uid(const std::string &uid ) {
    _splom.insert({"uid", uid});
    return *this;
}


Splom & Unselected(const CppPlotly::Trace::splom::Unselected &unselected ) {
    _splom.insert({"unselected", unselected});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Splom & Visible(const json11::Json::object &visible ) {
    _splom.insert({"visible", visible});
    return *this;
}


/**
Sets the list of x axes corresponding to this splom trace. By default, a splom will match the first N xaxes where N is the number of input dimensions.
*/Splom & Xaxes(const std::vector<std::string> &xaxes ) {
    _splom.insert({"xaxes", xaxes});
    return *this;
}


/**
Sets the list of y axes corresponding to this splom trace. By default, a splom will match the first N yaxes where N is the number of input dimensions.
*/Splom & Yaxes(const std::vector<std::string> &yaxes ) {
    _splom.insert({"yaxes", yaxes});
    return *this;
}


 

            json11::Json to_json() const {
                return _splom;
            }

        private:
            
            json11::Json::object _splom;

        };
    }
}


