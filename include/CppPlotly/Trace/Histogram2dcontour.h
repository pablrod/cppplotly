/**
 * @file Histogram2dcontour.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#histogram2dcontour>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Histogram2dcontour/Colorbar.h"
#include "CppPlotly/Trace/Histogram2dcontour/Contours.h"
#include "CppPlotly/Trace/Histogram2dcontour/Hoverlabel.h"
#include "CppPlotly/Trace/Histogram2dcontour/Line.h"
#include "CppPlotly/Trace/Histogram2dcontour/Marker.h"
#include "CppPlotly/Trace/Histogram2dcontour/Stream.h"
#include "CppPlotly/Trace/Histogram2dcontour/Transform.h"
#include "CppPlotly/Trace/Histogram2dcontour/Xbins.h"
#include "CppPlotly/Trace/Histogram2dcontour/Ybins.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a contour plot.
         *
         *
         */ 
        class Histogram2dcontour : public virtual CppPlotly::BaseTrace {
        public:
            Histogram2dcontour() :
                            _histogram2dcontour({
                                {"type", "histogram2dcontour"},
                                    })
                        {}

           /**
Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.
*/Histogram2dcontour & Autobinx(const bool &autobinx ) {
    _histogram2dcontour.insert({"autobinx", autobinx});
    return *this;
}


/**
Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.
*/Histogram2dcontour & Autobiny(const bool &autobiny ) {
    _histogram2dcontour.insert({"autobiny", autobiny});
    return *this;
}


/**
Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
*/Histogram2dcontour & Autocolorscale(const bool &autocolorscale ) {
    _histogram2dcontour.insert({"autocolorscale", autocolorscale});
    return *this;
}


/**
Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.
*/Histogram2dcontour & Autocontour(const bool &autocontour ) {
    _histogram2dcontour.insert({"autocontour", autocontour});
    return *this;
}


Histogram2dcontour & Colorbar(const CppPlotly::Trace::histogram2dcontour::Colorbar &colorbar ) {
    _histogram2dcontour.insert({"colorbar", colorbar});
    return *this;
}


/**
Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)', [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Greys,YlGnBu,Greens,YlOrRd,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,Hot,Blackbody,Earth,Electric,Viridis,Cividis.
*/Histogram2dcontour & Colorscale(const json11::Json &colorscale ) {
    _histogram2dcontour.insert({"colorscale", colorscale});
    return *this;
}


Histogram2dcontour & Contours(const CppPlotly::Trace::histogram2dcontour::Contours &contours ) {
    _histogram2dcontour.insert({"contours", contours});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Histogram2dcontour & Customdata(const std::vector<double> &customdata ) {
    _histogram2dcontour.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Histogram2dcontour & Customdata(const std::vector<std::string> &customdata ) {
    _histogram2dcontour.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Histogram2dcontour & Customdata(const json11::Json &customdata ) {
    _histogram2dcontour.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Histogram2dcontour & Customdatasrc(const std::string &customdatasrc ) {
    _histogram2dcontour.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.
*/Histogram2dcontour & Histfunc(const json11::Json &histfunc ) {
    _histogram2dcontour.insert({"histfunc", histfunc});
    return *this;
}


/**
Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).
*/Histogram2dcontour & Histnorm(const json11::Json &histnorm ) {
    _histogram2dcontour.insert({"histnorm", histnorm});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Histogram2dcontour & Hoverinfo(const json11::Json &hoverinfo ) {
    _histogram2dcontour.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Histogram2dcontour & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _histogram2dcontour.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Histogram2dcontour & Hoverlabel(const CppPlotly::Trace::histogram2dcontour::Hoverlabel &hoverlabel ) {
    _histogram2dcontour.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". See https://github.com/d3/d3-format/blob/master/README.md#locale_format for details on the formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plot.ly/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
*/Histogram2dcontour & Hovertemplate(const json11::Json &hovertemplate ) {
    _histogram2dcontour.insert({"hovertemplate", hovertemplate});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertemplate .
*/Histogram2dcontour & Hovertemplatesrc(const std::string &hovertemplatesrc ) {
    _histogram2dcontour.insert({"hovertemplatesrc", hovertemplatesrc});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Histogram2dcontour & Ids(const std::vector<double> &ids ) {
    _histogram2dcontour.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Histogram2dcontour & Ids(const std::vector<std::string> &ids ) {
    _histogram2dcontour.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Histogram2dcontour & Ids(const json11::Json &ids ) {
    _histogram2dcontour.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Histogram2dcontour & Idssrc(const std::string &idssrc ) {
    _histogram2dcontour.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Histogram2dcontour & Legendgroup(const std::string &legendgroup ) {
    _histogram2dcontour.insert({"legendgroup", legendgroup});
    return *this;
}


Histogram2dcontour & Line(const CppPlotly::Trace::histogram2dcontour::Line &line ) {
    _histogram2dcontour.insert({"line", line});
    return *this;
}


Histogram2dcontour & Marker(const CppPlotly::Trace::histogram2dcontour::Marker &marker ) {
    _histogram2dcontour.insert({"marker", marker});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Histogram2dcontour & Name(const std::string &name ) {
    _histogram2dcontour.insert({"name", name});
    return *this;
}


/**
Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.
*/Histogram2dcontour & Nbinsx(const int &nbinsx ) {
    _histogram2dcontour.insert({"nbinsx", nbinsx});
    return *this;
}


/**
Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.
*/Histogram2dcontour & Nbinsy(const int &nbinsy ) {
    _histogram2dcontour.insert({"nbinsy", nbinsy});
    return *this;
}


/**
Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.
*/Histogram2dcontour & Ncontours(const int &ncontours ) {
    _histogram2dcontour.insert({"ncontours", ncontours});
    return *this;
}


/**
Sets the opacity of the trace.
*/Histogram2dcontour & Opacity(const double &opacity ) {
    _histogram2dcontour.insert({"opacity", opacity});
    return *this;
}


/**
Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
*/Histogram2dcontour & Reversescale(const bool &reversescale ) {
    _histogram2dcontour.insert({"reversescale", reversescale});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Histogram2dcontour & Selectedpoints(const json11::Json &selectedpoints ) {
    _histogram2dcontour.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Histogram2dcontour & Showlegend(const bool &showlegend ) {
    _histogram2dcontour.insert({"showlegend", showlegend});
    return *this;
}


/**
Determines whether or not a colorbar is displayed for this trace.
*/Histogram2dcontour & Showscale(const bool &showscale ) {
    _histogram2dcontour.insert({"showscale", showscale});
    return *this;
}


Histogram2dcontour & Stream(const CppPlotly::Trace::histogram2dcontour::Stream &stream ) {
    _histogram2dcontour.insert({"stream", stream});
    return *this;
}


Histogram2dcontour & Transforms(const std::vector<CppPlotly::Trace::histogram2dcontour::Transform> &transforms ) {
    _histogram2dcontour.insert({"transforms", transforms});
    return *this;
}


/**
Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
*/Histogram2dcontour & Uid(const std::string &uid ) {
    _histogram2dcontour.insert({"uid", uid});
    return *this;
}


/**
Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
*/Histogram2dcontour & Uirevision(const json11::Json &uirevision ) {
    _histogram2dcontour.insert({"uirevision", uirevision});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Histogram2dcontour & Visible(const json11::Json &visible ) {
    _histogram2dcontour.insert({"visible", visible});
    return *this;
}


/**
Sets the sample data to be binned on the x axis.
*/Histogram2dcontour & X(const std::vector<double> &x ) {
    _histogram2dcontour.insert({"x", x});
    return *this;
}


/**
Sets the sample data to be binned on the x axis.
*/Histogram2dcontour & X(const std::vector<std::string> &x ) {
    _histogram2dcontour.insert({"x", x});
    return *this;
}


/**
Sets the sample data to be binned on the x axis.
*/Histogram2dcontour & X(const json11::Json &x ) {
    _histogram2dcontour.insert({"x", x});
    return *this;
}


/**
Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
*/Histogram2dcontour & Xaxis(const json11::Json &xaxis ) {
    _histogram2dcontour.insert({"xaxis", xaxis});
    return *this;
}


Histogram2dcontour & Xbins(const CppPlotly::Trace::histogram2dcontour::Xbins &xbins ) {
    _histogram2dcontour.insert({"xbins", xbins});
    return *this;
}


/**
Sets the calendar system to use with `x` date data.
*/Histogram2dcontour & Xcalendar(const json11::Json &xcalendar ) {
    _histogram2dcontour.insert({"xcalendar", xcalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  x .
*/Histogram2dcontour & Xsrc(const std::string &xsrc ) {
    _histogram2dcontour.insert({"xsrc", xsrc});
    return *this;
}


/**
Sets the sample data to be binned on the y axis.
*/Histogram2dcontour & Y(const std::vector<double> &y ) {
    _histogram2dcontour.insert({"y", y});
    return *this;
}


/**
Sets the sample data to be binned on the y axis.
*/Histogram2dcontour & Y(const std::vector<std::string> &y ) {
    _histogram2dcontour.insert({"y", y});
    return *this;
}


/**
Sets the sample data to be binned on the y axis.
*/Histogram2dcontour & Y(const json11::Json &y ) {
    _histogram2dcontour.insert({"y", y});
    return *this;
}


/**
Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
*/Histogram2dcontour & Yaxis(const json11::Json &yaxis ) {
    _histogram2dcontour.insert({"yaxis", yaxis});
    return *this;
}


Histogram2dcontour & Ybins(const CppPlotly::Trace::histogram2dcontour::Ybins &ybins ) {
    _histogram2dcontour.insert({"ybins", ybins});
    return *this;
}


/**
Sets the calendar system to use with `y` date data.
*/Histogram2dcontour & Ycalendar(const json11::Json &ycalendar ) {
    _histogram2dcontour.insert({"ycalendar", ycalendar});
    return *this;
}


/**
Sets the source reference on plot.ly for  y .
*/Histogram2dcontour & Ysrc(const std::string &ysrc ) {
    _histogram2dcontour.insert({"ysrc", ysrc});
    return *this;
}


/**
Sets the aggregation data.
*/Histogram2dcontour & Z(const std::vector<double> &z ) {
    _histogram2dcontour.insert({"z", z});
    return *this;
}


/**
Sets the aggregation data.
*/Histogram2dcontour & Z(const std::vector<std::string> &z ) {
    _histogram2dcontour.insert({"z", z});
    return *this;
}


/**
Sets the aggregation data.
*/Histogram2dcontour & Z(const json11::Json &z ) {
    _histogram2dcontour.insert({"z", z});
    return *this;
}


/**
Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.
*/Histogram2dcontour & Zauto(const bool &zauto ) {
    _histogram2dcontour.insert({"zauto", zauto});
    return *this;
}


/**
Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. See: https://github.com/d3/d3-format/blob/master/README.md#locale_format
*/Histogram2dcontour & Zhoverformat(const std::string &zhoverformat ) {
    _histogram2dcontour.insert({"zhoverformat", zhoverformat});
    return *this;
}


/**
Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
*/Histogram2dcontour & Zmax(const double &zmax ) {
    _histogram2dcontour.insert({"zmax", zmax});
    return *this;
}


/**
Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
*/Histogram2dcontour & Zmid(const double &zmid ) {
    _histogram2dcontour.insert({"zmid", zmid});
    return *this;
}


/**
Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
*/Histogram2dcontour & Zmin(const double &zmin ) {
    _histogram2dcontour.insert({"zmin", zmin});
    return *this;
}


/**
Sets the source reference on plot.ly for  z .
*/Histogram2dcontour & Zsrc(const std::string &zsrc ) {
    _histogram2dcontour.insert({"zsrc", zsrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _histogram2dcontour;
            }

        private:
            
            json11::Json::object _histogram2dcontour;

        };
    }
}


