/**
 * @file Barpolar.h
This file has been autogenerated from the official plotly.js source.

If you like Plotly, please support them: L<https://plot.ly/> 
Open source announcement: L<https://plot.ly/javascript/open-source-announcement/>

Full reference: L<https://plot.ly/javascript/reference/#barpolar>

This is an unofficial Plotly Perl module. Currently I'm not affiliated in any way with Plotly. 
But I think plotly.js is a great library and I want to use it with C++.
 *
 */
#include <vector>
#include <string>
#include <sstream>

#include <json11.hpp>

#include "../BaseTrace.h"

#include "CppPlotly/Trace/Barpolar/Hoverlabel.h"
#include "CppPlotly/Trace/Barpolar/Marker.h"
#include "CppPlotly/Trace/Barpolar/Selected.h"
#include "CppPlotly/Trace/Barpolar/Stream.h"
#include "CppPlotly/Trace/Barpolar/Transform.h"
#include "CppPlotly/Trace/Barpolar/Unselected.h"


namespace CppPlotly {
    namespace Trace {
        /**
         * The data visualized by the radial span of the bars is set in `r`
         *
         *
         */ 
        class Barpolar : public virtual CppPlotly::BaseTrace {
        public:
            Barpolar() :
                            _barpolar({
                                {"type", "barpolar"},
                                    })
                        {}

           /**
Sets where the bar base is drawn (in radial axis units). In *stack* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.
*/Barpolar & Base(const json11::Json &base ) {
    _barpolar.insert({"base", base});
    return *this;
}


/**
Sets the source reference on plot.ly for  base .
*/Barpolar & Basesrc(const std::string &basesrc ) {
    _barpolar.insert({"basesrc", basesrc});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Barpolar & Customdata(const std::vector<double> &customdata ) {
    _barpolar.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Barpolar & Customdata(const std::vector<std::string> &customdata ) {
    _barpolar.insert({"customdata", customdata});
    return *this;
}


/**
Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
*/Barpolar & Customdata(const json11::Json &customdata ) {
    _barpolar.insert({"customdata", customdata});
    return *this;
}


/**
Sets the source reference on plot.ly for  customdata .
*/Barpolar & Customdatasrc(const std::string &customdatasrc ) {
    _barpolar.insert({"customdatasrc", customdatasrc});
    return *this;
}


/**
Sets the r coordinate step.
*/Barpolar & Dr(const double &dr ) {
    _barpolar.insert({"dr", dr});
    return *this;
}


/**
Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.
*/Barpolar & Dtheta(const double &dtheta ) {
    _barpolar.insert({"dtheta", dtheta});
    return *this;
}


/**
Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
*/Barpolar & Hoverinfo(const json11::Json &hoverinfo ) {
    _barpolar.insert({"hoverinfo", hoverinfo});
    return *this;
}


/**
Sets the source reference on plot.ly for  hoverinfo .
*/Barpolar & Hoverinfosrc(const std::string &hoverinfosrc ) {
    _barpolar.insert({"hoverinfosrc", hoverinfosrc});
    return *this;
}


Barpolar & Hoverlabel(const CppPlotly::Trace::barpolar::Hoverlabel &hoverlabel ) {
    _barpolar.insert({"hoverlabel", hoverlabel});
    return *this;
}


/**
Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". See https://github.com/d3/d3-format/blob/master/README.md#locale_format for details on the formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plot.ly/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
*/Barpolar & Hovertemplate(const json11::Json &hovertemplate ) {
    _barpolar.insert({"hovertemplate", hovertemplate});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertemplate .
*/Barpolar & Hovertemplatesrc(const std::string &hovertemplatesrc ) {
    _barpolar.insert({"hovertemplatesrc", hovertemplatesrc});
    return *this;
}


/**
Same as `text`.
*/Barpolar & Hovertext(const json11::Json &hovertext ) {
    _barpolar.insert({"hovertext", hovertext});
    return *this;
}


/**
Sets the source reference on plot.ly for  hovertext .
*/Barpolar & Hovertextsrc(const std::string &hovertextsrc ) {
    _barpolar.insert({"hovertextsrc", hovertextsrc});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Barpolar & Ids(const std::vector<double> &ids ) {
    _barpolar.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Barpolar & Ids(const std::vector<std::string> &ids ) {
    _barpolar.insert({"ids", ids});
    return *this;
}


/**
Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
*/Barpolar & Ids(const json11::Json &ids ) {
    _barpolar.insert({"ids", ids});
    return *this;
}


/**
Sets the source reference on plot.ly for  ids .
*/Barpolar & Idssrc(const std::string &idssrc ) {
    _barpolar.insert({"idssrc", idssrc});
    return *this;
}


/**
Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.
*/Barpolar & Legendgroup(const std::string &legendgroup ) {
    _barpolar.insert({"legendgroup", legendgroup});
    return *this;
}


Barpolar & Marker(const CppPlotly::Trace::barpolar::Marker &marker ) {
    _barpolar.insert({"marker", marker});
    return *this;
}


/**
Sets the trace name. The trace name appear as the legend item and on hover.
*/Barpolar & Name(const std::string &name ) {
    _barpolar.insert({"name", name});
    return *this;
}


/**
Shifts the angular position where the bar is drawn (in *thetatunit* units).
*/Barpolar & Offset(const json11::Json &offset ) {
    _barpolar.insert({"offset", offset});
    return *this;
}


/**
Sets the source reference on plot.ly for  offset .
*/Barpolar & Offsetsrc(const std::string &offsetsrc ) {
    _barpolar.insert({"offsetsrc", offsetsrc});
    return *this;
}


/**
Sets the opacity of the trace.
*/Barpolar & Opacity(const double &opacity ) {
    _barpolar.insert({"opacity", opacity});
    return *this;
}


/**
Sets the radial coordinates
*/Barpolar & R(const std::vector<double> &r ) {
    _barpolar.insert({"r", r});
    return *this;
}


/**
Sets the radial coordinates
*/Barpolar & R(const std::vector<std::string> &r ) {
    _barpolar.insert({"r", r});
    return *this;
}


/**
Sets the radial coordinates
*/Barpolar & R(const json11::Json &r ) {
    _barpolar.insert({"r", r});
    return *this;
}


/**
Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.
*/Barpolar & R0(const json11::Json &r0 ) {
    _barpolar.insert({"r0", r0});
    return *this;
}


/**
Sets the source reference on plot.ly for  r .
*/Barpolar & Rsrc(const std::string &rsrc ) {
    _barpolar.insert({"rsrc", rsrc});
    return *this;
}


Barpolar & Selected(const CppPlotly::Trace::barpolar::Selected &selected ) {
    _barpolar.insert({"selected", selected});
    return *this;
}


/**
Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
*/Barpolar & Selectedpoints(const json11::Json &selectedpoints ) {
    _barpolar.insert({"selectedpoints", selectedpoints});
    return *this;
}


/**
Determines whether or not an item corresponding to this trace is shown in the legend.
*/Barpolar & Showlegend(const bool &showlegend ) {
    _barpolar.insert({"showlegend", showlegend});
    return *this;
}


Barpolar & Stream(const CppPlotly::Trace::barpolar::Stream &stream ) {
    _barpolar.insert({"stream", stream});
    return *this;
}


/**
Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.
*/Barpolar & Subplot(const json11::Json &subplot ) {
    _barpolar.insert({"subplot", subplot});
    return *this;
}


/**
Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.
*/Barpolar & Text(const json11::Json &text ) {
    _barpolar.insert({"text", text});
    return *this;
}


/**
Sets the source reference on plot.ly for  text .
*/Barpolar & Textsrc(const std::string &textsrc ) {
    _barpolar.insert({"textsrc", textsrc});
    return *this;
}


/**
Sets the angular coordinates
*/Barpolar & Theta(const std::vector<double> &theta ) {
    _barpolar.insert({"theta", theta});
    return *this;
}


/**
Sets the angular coordinates
*/Barpolar & Theta(const std::vector<std::string> &theta ) {
    _barpolar.insert({"theta", theta});
    return *this;
}


/**
Sets the angular coordinates
*/Barpolar & Theta(const json11::Json &theta ) {
    _barpolar.insert({"theta", theta});
    return *this;
}


/**
Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.
*/Barpolar & Theta0(const json11::Json &theta0 ) {
    _barpolar.insert({"theta0", theta0});
    return *this;
}


/**
Sets the source reference on plot.ly for  theta .
*/Barpolar & Thetasrc(const std::string &thetasrc ) {
    _barpolar.insert({"thetasrc", thetasrc});
    return *this;
}


/**
Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.
*/Barpolar & Thetaunit(const json11::Json &thetaunit ) {
    _barpolar.insert({"thetaunit", thetaunit});
    return *this;
}


Barpolar & Transforms(const std::vector<CppPlotly::Trace::barpolar::Transform> &transforms ) {
    _barpolar.insert({"transforms", transforms});
    return *this;
}


/**
Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
*/Barpolar & Uid(const std::string &uid ) {
    _barpolar.insert({"uid", uid});
    return *this;
}


/**
Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
*/Barpolar & Uirevision(const json11::Json &uirevision ) {
    _barpolar.insert({"uirevision", uirevision});
    return *this;
}


Barpolar & Unselected(const CppPlotly::Trace::barpolar::Unselected &unselected ) {
    _barpolar.insert({"unselected", unselected});
    return *this;
}


/**
Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
*/Barpolar & Visible(const json11::Json &visible ) {
    _barpolar.insert({"visible", visible});
    return *this;
}


/**
Sets the bar angular width (in *thetaunit* units).
*/Barpolar & Width(const json11::Json &width ) {
    _barpolar.insert({"width", width});
    return *this;
}


/**
Sets the source reference on plot.ly for  width .
*/Barpolar & Widthsrc(const std::string &widthsrc ) {
    _barpolar.insert({"widthsrc", widthsrc});
    return *this;
}


 

            virtual json11::Json to_json() const {
                return _barpolar;
            }

        private:
            
            json11::Json::object _barpolar;

        };
    }
}


